
final_project_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001640  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  080017e0  080017e0  000117e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b4c  08001b4c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001b4c  08001b4c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b4c  08001b4c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b4c  08001b4c  00011b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b50  08001b50  00011b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  20000068  08001bbc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08001bbc  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007220  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015a2  00000000  00000000  000272b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002b8  00000000  00000000  00028860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001f0  00000000  00000000  00028b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b4d  00000000  00000000  00028d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000423c  00000000  00000000  00042855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087610  00000000  00000000  00046a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ce0a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b68  00000000  00000000  000ce0f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080017c8 	.word	0x080017c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080017c8 	.word	0x080017c8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	db0b      	blt.n	80002da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 021f 	and.w	r2, r3, #31
 80002c8:	4907      	ldr	r1, [pc, #28]	; (80002e8 <__NVIC_EnableIRQ+0x38>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	e000e100 	.word	0xe000e100

080002ec <BUTTON_init>:
#include "eventQ.h"
#include "modem.h"
#include "usart1.h"


void BUTTON_init(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
    // Enable the GPIOC clock.
    RCC->AHBENR |= 0x00080000;
 80002f0:	4b11      	ldr	r3, [pc, #68]	; (8000338 <BUTTON_init+0x4c>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a10      	ldr	r2, [pc, #64]	; (8000338 <BUTTON_init+0x4c>)
 80002f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002fa:	6153      	str	r3, [r2, #20]
    // Enable the SYSCFG clock. This is necessary for connecting PC13 to EXTI13.
    RCC->APB2ENR |= 0x00000001;
 80002fc:	4b0e      	ldr	r3, [pc, #56]	; (8000338 <BUTTON_init+0x4c>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a0d      	ldr	r2, [pc, #52]	; (8000338 <BUTTON_init+0x4c>)
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	6193      	str	r3, [r2, #24]
    // Connect PC13 to EXTI13. See p. 252 of the reference manual.
    // Note that the reference manual counts the registers beginning with EXTICR from
    // 1 to 4,
    // while the h-file stm32f303xe.h defines the registers as an array of size 4.
    // So EXTICR4 in the reference manual is EXTICR[3] in the program.
    SYSCFG->EXTICR[3] |= 0x00000020;
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <BUTTON_init+0x50>)
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	4a0b      	ldr	r2, [pc, #44]	; (800033c <BUTTON_init+0x50>)
 800030e:	f043 0320 	orr.w	r3, r3, #32
 8000312:	6153      	str	r3, [r2, #20]
    // Set EXTI13 to be triggered by a falling edge.
    EXTI->FTSR |= 0x00002000;
 8000314:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <BUTTON_init+0x54>)
 8000316:	68db      	ldr	r3, [r3, #12]
 8000318:	4a09      	ldr	r2, [pc, #36]	; (8000340 <BUTTON_init+0x54>)
 800031a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800031e:	60d3      	str	r3, [r2, #12]
    // Enable EXTI13.
    EXTI->IMR |= 0x00002000;
 8000320:	4b07      	ldr	r3, [pc, #28]	; (8000340 <BUTTON_init+0x54>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a06      	ldr	r2, [pc, #24]	; (8000340 <BUTTON_init+0x54>)
 8000326:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800032a:	6013      	str	r3, [r2, #0]
    // Enable the interrupt handler for EXTI13.
    NVIC_EnableIRQ(EXTI15_10_IRQn);
 800032c:	2028      	movs	r0, #40	; 0x28
 800032e:	f7ff ffbf 	bl	80002b0 <__NVIC_EnableIRQ>
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40021000 	.word	0x40021000
 800033c:	40010000 	.word	0x40010000
 8000340:	40010400 	.word	0x40010400

08000344 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void){
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
    // Reset the interrupt request flag.
	EXTI->PR |= 0x00002000;
 8000348:	4b05      	ldr	r3, [pc, #20]	; (8000360 <EXTI15_10_IRQHandler+0x1c>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	4a04      	ldr	r2, [pc, #16]	; (8000360 <EXTI15_10_IRQHandler+0x1c>)
 800034e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000352:	6153      	str	r3, [r2, #20]
	// write to the queque that the button was pressed
    eventQ_write(EVENT_BUTTON_PRESSED);
 8000354:	2001      	movs	r0, #1
 8000356:	f000 f88d 	bl	8000474 <eventQ_write>
}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40010400 	.word	0x40010400

08000364 <BUTTON_sendCommand>:


void BUTTON_sendCommand(void){
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	USART1_print("AT+CIPSEND=0,12\r\n");
 8000368:	4805      	ldr	r0, [pc, #20]	; (8000380 <BUTTON_sendCommand+0x1c>)
 800036a:	f000 fbf7 	bl	8000b5c <USART1_print>
	delay(3);
 800036e:	2003      	movs	r0, #3
 8000370:	f000 f9e6 	bl	8000740 <delay>
	USART1_print("CHANGE_LED\r\n");
 8000374:	4803      	ldr	r0, [pc, #12]	; (8000384 <BUTTON_sendCommand+0x20>)
 8000376:	f000 fbf1 	bl	8000b5c <USART1_print>
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	080017e0 	.word	0x080017e0
 8000384:	080017f4 	.word	0x080017f4

08000388 <buffer_init>:
#include "types.h"
#include "cyclic_buffer.h"


 void buffer_init(cyclic_buffer *cy){
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	 cy->write=cy->buffer;
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	 cy->read=cy->buffer;
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80003a0:	bf00      	nop
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <buffer_write>:

 void buffer_write(cyclic_buffer *cy, char c){
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	460b      	mov	r3, r1
 80003b6:	70fb      	strb	r3, [r7, #3]
	 *(cy->write)=c;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003be:	78fa      	ldrb	r2, [r7, #3]
 80003c0:	701a      	strb	r2, [r3, #0]
	 if(++(cy->write)==(cy->buffer)+BUFFER_SIZE)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003c8:	1c5a      	adds	r2, r3, #1
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	3380      	adds	r3, #128	; 0x80
 80003da:	429a      	cmp	r2, r3
 80003dc:	d103      	bne.n	80003e6 <buffer_write+0x3a>
		 cy->write=cy->buffer;
 80003de:	687a      	ldr	r2, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

 }
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr

080003f2 <buffer_read>:
 char buffer_read(cyclic_buffer *cy){
 80003f2:	b480      	push	{r7}
 80003f4:	b085      	sub	sp, #20
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	6078      	str	r0, [r7, #4]
	 char c=*(cy->read);
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	73fb      	strb	r3, [r7, #15]
	 if(++(cy->read)==cy->buffer+BUFFER_SIZE)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800040a:	1c5a      	adds	r2, r3, #1
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	3380      	adds	r3, #128	; 0x80
 800041c:	429a      	cmp	r2, r3
 800041e:	d103      	bne.n	8000428 <buffer_read+0x36>
		 cy->read=cy->buffer;
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	 return c;
 8000428:	7bfb      	ldrb	r3, [r7, #15]
 }
 800042a:	4618      	mov	r0, r3
 800042c:	3714      	adds	r7, #20
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <buffer_isEmpty>:

 BOOL buffer_isEmpty(cyclic_buffer *cy){
 8000436:	b480      	push	{r7}
 8000438:	b083      	sub	sp, #12
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
	 return cy->read==cy->write;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800044a:	429a      	cmp	r2, r3
 800044c:	bf0c      	ite	eq
 800044e:	2301      	moveq	r3, #1
 8000450:	2300      	movne	r3, #0
 8000452:	b2db      	uxtb	r3, r3
 }
 8000454:	4618      	mov	r0, r3
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <eventQ_init>:
#include "cyclic_buffer.h"
#include "eventQ.h"

static cyclic_buffer eventQ_cy;

 void eventQ_init(){
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	 buffer_init(&eventQ_cy);
 8000464:	4802      	ldr	r0, [pc, #8]	; (8000470 <eventQ_init+0x10>)
 8000466:	f7ff ff8f 	bl	8000388 <buffer_init>
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000084 	.word	0x20000084

08000474 <eventQ_write>:

 void eventQ_write(uint32_t q){
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	 buffer_write(&eventQ_cy, (char)q);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	b2db      	uxtb	r3, r3
 8000480:	4619      	mov	r1, r3
 8000482:	4803      	ldr	r0, [pc, #12]	; (8000490 <eventQ_write+0x1c>)
 8000484:	f7ff ff92 	bl	80003ac <buffer_write>
 }
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000084 	.word	0x20000084

08000494 <eventQ_read>:
 uint32_t eventQ_read(){
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	 return (uint32_t)buffer_read(&eventQ_cy);
 8000498:	4802      	ldr	r0, [pc, #8]	; (80004a4 <eventQ_read+0x10>)
 800049a:	f7ff ffaa 	bl	80003f2 <buffer_read>
 800049e:	4603      	mov	r3, r0
 }
 80004a0:	4618      	mov	r0, r3
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	20000084 	.word	0x20000084

080004a8 <eventQ_isEmpty>:

 BOOL eventQ_isEmpty(){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	return buffer_isEmpty(&eventQ_cy);
 80004ac:	4802      	ldr	r0, [pc, #8]	; (80004b8 <eventQ_isEmpty+0x10>)
 80004ae:	f7ff ffc2 	bl	8000436 <buffer_isEmpty>
 80004b2:	4603      	mov	r3, r0
 }
 80004b4:	4618      	mov	r0, r3
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000084 	.word	0x20000084

080004bc <LED_init>:
// initial state of the led is it to be off
static int currentState=LED_STATE_OFF;
static BOOL Blink = FALSE;
static unsigned char Blink_Counter = 0;

void LED_init(void){
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
    // Enable the GPIOA clock.
    RCC->AHBENR |= 0x00020000;
 80004c0:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <LED_init+0x2c>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	4a08      	ldr	r2, [pc, #32]	; (80004e8 <LED_init+0x2c>)
 80004c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ca:	6153      	str	r3, [r2, #20]
    // Configure PA5 as output
    // (by default it will then be push pull, see p. 237 of the reference manual).
    GPIOA->MODER |= 0x00000400;
 80004cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004da:	6013      	str	r3, [r2, #0]
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40021000 	.word	0x40021000

080004ec <LED_off>:

void LED_off(void){
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~0x00000020;
 80004f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004fa:	f023 0320 	bic.w	r3, r3, #32
 80004fe:	6153      	str	r3, [r2, #20]
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr

0800050a <LED_on>:

void LED_on(void){
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
    GPIOA->ODR |= 0x00000020;
 800050e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000512:	695b      	ldr	r3, [r3, #20]
 8000514:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000518:	f043 0320 	orr.w	r3, r3, #32
 800051c:	6153      	str	r3, [r2, #20]
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <LED_toggle>:

void LED_toggle(void){
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= 0x00000020;
 800052c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000536:	f083 0320 	eor.w	r3, r3, #32
 800053a:	6153      	str	r3, [r2, #20]
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
	...

08000548 <LED_blink_handle>:

void LED_blink_handle(void){
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	if(Blink){
 800054c:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <LED_blink_handle+0x30>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d00e      	beq.n	8000572 <LED_blink_handle+0x2a>
        Blink_Counter++;
 8000554:	4b09      	ldr	r3, [pc, #36]	; (800057c <LED_blink_handle+0x34>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	3301      	adds	r3, #1
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <LED_blink_handle+0x34>)
 800055e:	701a      	strb	r2, [r3, #0]
        if(Blink_Counter == BLINK_HALF_PERIOD_IN_SEC){
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <LED_blink_handle+0x34>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d104      	bne.n	8000572 <LED_blink_handle+0x2a>
        	Blink_Counter = 0;
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <LED_blink_handle+0x34>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
        	LED_toggle();
 800056e:	f7ff ffdb 	bl	8000528 <LED_toggle>
        }
	}
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	2000010c 	.word	0x2000010c
 800057c:	2000010d 	.word	0x2000010d

08000580 <LED_change_state>:
void LED_change_state(){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	switch( currentState ){
 8000584:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <LED_change_state+0x64>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b02      	cmp	r3, #2
 800058a:	d01b      	beq.n	80005c4 <LED_change_state+0x44>
 800058c:	2b02      	cmp	r3, #2
 800058e:	dc25      	bgt.n	80005dc <LED_change_state+0x5c>
 8000590:	2b00      	cmp	r3, #0
 8000592:	d00d      	beq.n	80005b0 <LED_change_state+0x30>
 8000594:	2b01      	cmp	r3, #1
 8000596:	d121      	bne.n	80005dc <LED_change_state+0x5c>
		// if led is off turn it on
		case LED_STATE_OFF:
			Blink = FALSE;
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <LED_change_state+0x68>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
	    	LED_on();
 800059e:	f7ff ffb4 	bl	800050a <LED_on>
	    	currentState=LED_STATE_ON;
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <LED_change_state+0x64>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
			print("Server led is now on\n");
 80005a8:	4810      	ldr	r0, [pc, #64]	; (80005ec <LED_change_state+0x6c>)
 80005aa:	f000 fbb3 	bl	8000d14 <print>
			break;
 80005ae:	e016      	b.n	80005de <LED_change_state+0x5e>
		// if led is on make it blink
		case LED_STATE_ON:
			Blink = TRUE;
 80005b0:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <LED_change_state+0x68>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	701a      	strb	r2, [r3, #0]
			currentState=LED_STATE_BLINK;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <LED_change_state+0x64>)
 80005b8:	2202      	movs	r2, #2
 80005ba:	601a      	str	r2, [r3, #0]
			print("Server led is now blinking\n");
 80005bc:	480c      	ldr	r0, [pc, #48]	; (80005f0 <LED_change_state+0x70>)
 80005be:	f000 fba9 	bl	8000d14 <print>
			break;
 80005c2:	e00c      	b.n	80005de <LED_change_state+0x5e>
		// if led is blinking turn it off
		case LED_STATE_BLINK:
			Blink = FALSE;
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <LED_change_state+0x68>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
			LED_off();
 80005ca:	f7ff ff8f 	bl	80004ec <LED_off>
			currentState=LED_STATE_OFF;
 80005ce:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <LED_change_state+0x64>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	601a      	str	r2, [r3, #0]
			print("Server led is now off\n");
 80005d4:	4807      	ldr	r0, [pc, #28]	; (80005f4 <LED_change_state+0x74>)
 80005d6:	f000 fb9d 	bl	8000d14 <print>
			break;
 80005da:	e000      	b.n	80005de <LED_change_state+0x5e>
		default:
			break;
 80005dc:	bf00      	nop
	}
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000000 	.word	0x20000000
 80005e8:	2000010c 	.word	0x2000010c
 80005ec:	08001804 	.word	0x08001804
 80005f0:	0800181c 	.word	0x0800181c
 80005f4:	08001838 	.word	0x08001838

080005f8 <main>:
#include "eventQ.h"
#include "modem.h"
#include "watchdog.h"
#include "types.h"
#include "cyclic_buffer.h"
int main(void){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
	// initialize everything related for the program to work as its supposed to
    WATCHDOG_init();
 80005fe:	f000 fc01 	bl	8000e04 <WATCHDOG_init>
    BUTTON_init();
 8000602:	f7ff fe73 	bl	80002ec <BUTTON_init>
    LED_init();
 8000606:	f7ff ff59 	bl	80004bc <LED_init>
    TIMER2_init();
 800060a:	f000 f9d3 	bl	80009b4 <TIMER2_init>
    USART1_init();
 800060e:	f000 fa35 	bl	8000a7c <USART1_init>
    USART2_init();
 8000612:	f000 fb4b 	bl	8000cac <USART2_init>
    eventQ_init();
 8000616:	f7ff ff23 	bl	8000460 <eventQ_init>
    MODEM_init();
 800061a:	f000 f877 	bl	800070c <MODEM_init>
    print("I'm the server side, nice to meet you! \n");
 800061e:	481b      	ldr	r0, [pc, #108]	; (800068c <main+0x94>)
 8000620:	f000 fb78 	bl	8000d14 <print>
    print("Use WIFICONNECT command to connect to wifi\n\n");
 8000624:	481a      	ldr	r0, [pc, #104]	; (8000690 <main+0x98>)
 8000626:	f000 fb75 	bl	8000d14 <print>


    while(1){
    	//keep checking for new events and handle them accordingly
    	if(!eventQ_isEmpty()){
 800062a:	f7ff ff3d 	bl	80004a8 <eventQ_isEmpty>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d121      	bne.n	8000678 <main+0x80>
    		uint32_t q=eventQ_read();
 8000634:	f7ff ff2e 	bl	8000494 <eventQ_read>
 8000638:	6078      	str	r0, [r7, #4]
    		if(q==EVENT_BUTTON_PRESSED){
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d10e      	bne.n	800065e <main+0x66>
    			USART2_print("Button pressed!\n");
 8000640:	4814      	ldr	r0, [pc, #80]	; (8000694 <main+0x9c>)
 8000642:	f000 fbbd 	bl	8000dc0 <USART2_print>
    			if(getClientState())
 8000646:	f000 f845 	bl	80006d4 <getClientState>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d002      	beq.n	8000656 <main+0x5e>
    				BUTTON_sendCommand();
 8000650:	f7ff fe88 	bl	8000364 <BUTTON_sendCommand>
 8000654:	e00e      	b.n	8000674 <main+0x7c>
    			else
    				USART2_print("but client isn't connected\r\n");
 8000656:	4810      	ldr	r0, [pc, #64]	; (8000698 <main+0xa0>)
 8000658:	f000 fbb2 	bl	8000dc0 <USART2_print>
 800065c:	e00a      	b.n	8000674 <main+0x7c>
    		}
    		else if(q==EVENT_USART1_MESSAGE){
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b02      	cmp	r3, #2
 8000662:	d102      	bne.n	800066a <main+0x72>
    			USART1TERMINAL_handleCommand();
 8000664:	f000 fa9c 	bl	8000ba0 <USART1TERMINAL_handleCommand>
 8000668:	e004      	b.n	8000674 <main+0x7c>
    		}
    		else if(q==EVENT_USART2_MESSAGE){
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d101      	bne.n	8000674 <main+0x7c>
            	TERMINAL_handleCommand();
 8000670:	f000 f8fe 	bl	8000870 <TERMINAL_handleCommand>
    		}
			WATCHDOG_pet();
 8000674:	f000 fbe2 	bl	8000e3c <WATCHDOG_pet>

    	}
		 if(TIMER2_expired()){
 8000678:	f000 f9ce 	bl	8000a18 <TIMER2_expired>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <main+0x8e>
			LED_blink_handle();
 8000682:	f7ff ff61 	bl	8000548 <LED_blink_handle>
		}
		 WATCHDOG_pet();
 8000686:	f000 fbd9 	bl	8000e3c <WATCHDOG_pet>
    	if(!eventQ_isEmpty()){
 800068a:	e7ce      	b.n	800062a <main+0x32>
 800068c:	08001850 	.word	0x08001850
 8000690:	0800187c 	.word	0x0800187c
 8000694:	080018ac 	.word	0x080018ac
 8000698:	080018c0 	.word	0x080018c0

0800069c <getWifiConnecting>:
#include "timer2.h"

static BOOL clientState=FALSE;
static BOOL wifiConnecting=FALSE;

BOOL getWifiConnecting(){
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
	return wifiConnecting;
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <getWifiConnecting+0x14>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	2000010f 	.word	0x2000010f

080006b4 <setWifiConnecting>:
void setWifiConnecting(BOOL b){
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	wifiConnecting=b;
 80006be:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <setWifiConnecting+0x1c>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	7013      	strb	r3, [r2, #0]
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	2000010f 	.word	0x2000010f

080006d4 <getClientState>:


BOOL getClientState(){
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
	return clientState;
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <getClientState+0x14>)
 80006da:	781b      	ldrb	r3, [r3, #0]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	2000010e 	.word	0x2000010e

080006ec <setClientState>:
void setClientState(BOOL b){
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	clientState=b;
 80006f6:	4a04      	ldr	r2, [pc, #16]	; (8000708 <setClientState+0x1c>)
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	7013      	strb	r3, [r2, #0]
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	2000010e 	.word	0x2000010e

0800070c <MODEM_init>:


void MODEM_init(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	//#Server side
	//Dear modem, be in station mode
	USART1_print("AT+CWMODE=1\r\n");
 8000710:	4808      	ldr	r0, [pc, #32]	; (8000734 <MODEM_init+0x28>)
 8000712:	f000 fa23 	bl	8000b5c <USART1_print>
	// wait a second until the previous command is executed
	delay(1);
 8000716:	2001      	movs	r0, #1
 8000718:	f000 f812 	bl	8000740 <delay>
	//Enabling the modem to accept multiple connections
	USART1_print("AT+CIPMUX=1\r\n");
 800071c:	4806      	ldr	r0, [pc, #24]	; (8000738 <MODEM_init+0x2c>)
 800071e:	f000 fa1d 	bl	8000b5c <USART1_print>
	delay(1);
 8000722:	2001      	movs	r0, #1
 8000724:	f000 f80c 	bl	8000740 <delay>
	//Open TCP connection on port 80
	USART1_print("AT+CIPSERVER=1,80\r\n");
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MODEM_init+0x30>)
 800072a:	f000 fa17 	bl	8000b5c <USART1_print>

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	080018e0 	.word	0x080018e0
 8000738:	080018f0 	.word	0x080018f0
 800073c:	08001900 	.word	0x08001900

08000740 <delay>:

void delay(int seconds){
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	int counter=0;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
	while(1){
		if(TIMER2_expired())
 800074c:	f000 f964 	bl	8000a18 <TIMER2_expired>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d002      	beq.n	800075c <delay+0x1c>
			counter++;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	3301      	adds	r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
		if(counter==seconds)
 800075c:	68fa      	ldr	r2, [r7, #12]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	429a      	cmp	r2, r3
 8000762:	d000      	beq.n	8000766 <delay+0x26>
		if(TIMER2_expired())
 8000764:	e7f2      	b.n	800074c <delay+0xc>
			return;
 8000766:	bf00      	nop
	}
}
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <wifiConnect>:

void wifiConnect(char *ssid, char *password){
 8000770:	b5b0      	push	{r4, r5, r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
 800077a:	466b      	mov	r3, sp
 800077c:	461d      	mov	r5, r3
	// this will be the length of the command
	int commandLen=16+strlen(ssid)+strlen(password);
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff fd38 	bl	80001f4 <strlen>
 8000784:	4604      	mov	r4, r0
 8000786:	6838      	ldr	r0, [r7, #0]
 8000788:	f7ff fd34 	bl	80001f4 <strlen>
 800078c:	4603      	mov	r3, r0
 800078e:	4423      	add	r3, r4
 8000790:	3310      	adds	r3, #16
 8000792:	617b      	str	r3, [r7, #20]
	// this string represents the command that connects the modem to preferred WiFi
	char built_command[commandLen];
 8000794:	697c      	ldr	r4, [r7, #20]
 8000796:	1e63      	subs	r3, r4, #1
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4623      	mov	r3, r4
 800079c:	4618      	mov	r0, r3
 800079e:	f04f 0100 	mov.w	r1, #0
 80007a2:	f04f 0200 	mov.w	r2, #0
 80007a6:	f04f 0300 	mov.w	r3, #0
 80007aa:	00cb      	lsls	r3, r1, #3
 80007ac:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80007b0:	00c2      	lsls	r2, r0, #3
 80007b2:	4623      	mov	r3, r4
 80007b4:	4618      	mov	r0, r3
 80007b6:	f04f 0100 	mov.w	r1, #0
 80007ba:	f04f 0200 	mov.w	r2, #0
 80007be:	f04f 0300 	mov.w	r3, #0
 80007c2:	00cb      	lsls	r3, r1, #3
 80007c4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80007c8:	00c2      	lsls	r2, r0, #3
 80007ca:	4623      	mov	r3, r4
 80007cc:	3307      	adds	r3, #7
 80007ce:	08db      	lsrs	r3, r3, #3
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	ebad 0d03 	sub.w	sp, sp, r3
 80007d6:	466b      	mov	r3, sp
 80007d8:	3300      	adds	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
	// building the command and adding /r/n at the end
	(void)strcpy(built_command, "AT+CWJAP=\"");
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	491a      	ldr	r1, [pc, #104]	; (8000848 <wifiConnect+0xd8>)
 80007e0:	461a      	mov	r2, r3
 80007e2:	460b      	mov	r3, r1
 80007e4:	cb03      	ldmia	r3!, {r0, r1}
 80007e6:	6010      	str	r0, [r2, #0]
 80007e8:	6051      	str	r1, [r2, #4]
 80007ea:	8819      	ldrh	r1, [r3, #0]
 80007ec:	789b      	ldrb	r3, [r3, #2]
 80007ee:	8111      	strh	r1, [r2, #8]
 80007f0:	7293      	strb	r3, [r2, #10]
	strcat(built_command,ssid);
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	6879      	ldr	r1, [r7, #4]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 fb7c 	bl	8000ef4 <strcat>
	strcat(built_command,"\",\"");
 80007fc:	68fc      	ldr	r4, [r7, #12]
 80007fe:	4620      	mov	r0, r4
 8000800:	f7ff fcf8 	bl	80001f4 <strlen>
 8000804:	4603      	mov	r3, r0
 8000806:	4423      	add	r3, r4
 8000808:	4a10      	ldr	r2, [pc, #64]	; (800084c <wifiConnect+0xdc>)
 800080a:	6810      	ldr	r0, [r2, #0]
 800080c:	6018      	str	r0, [r3, #0]
	strcat(built_command,password);
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	6839      	ldr	r1, [r7, #0]
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fb6e 	bl	8000ef4 <strcat>
	strcat(built_command,"\"\r\n");
 8000818:	68fc      	ldr	r4, [r7, #12]
 800081a:	4620      	mov	r0, r4
 800081c:	f7ff fcea 	bl	80001f4 <strlen>
 8000820:	4603      	mov	r3, r0
 8000822:	4423      	add	r3, r4
 8000824:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <wifiConnect+0xe0>)
 8000826:	6810      	ldr	r0, [r2, #0]
 8000828:	6018      	str	r0, [r3, #0]
	USART2_print("\nEstablishing connection..\nEnjoy a cup of tea meanwhile =]\n\n");
 800082a:	480a      	ldr	r0, [pc, #40]	; (8000854 <wifiConnect+0xe4>)
 800082c:	f000 fac8 	bl	8000dc0 <USART2_print>
	//Connect to WiFi
	USART1_print(built_command);
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	4618      	mov	r0, r3
 8000834:	f000 f992 	bl	8000b5c <USART1_print>
	wifiConnecting=TRUE;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <wifiConnect+0xe8>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	46ad      	mov	sp, r5
}
 8000840:	bf00      	nop
 8000842:	3718      	adds	r7, #24
 8000844:	46bd      	mov	sp, r7
 8000846:	bdb0      	pop	{r4, r5, r7, pc}
 8000848:	08001914 	.word	0x08001914
 800084c:	08001920 	.word	0x08001920
 8000850:	08001924 	.word	0x08001924
 8000854:	08001928 	.word	0x08001928
 8000858:	2000010f 	.word	0x2000010f

0800085c <setServer>:

void setServer(){
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	//Open TCP connection on port 80
	USART1_print("AT+CIPSERVER=1,80\r\n");
 8000860:	4802      	ldr	r0, [pc, #8]	; (800086c <setServer+0x10>)
 8000862:	f000 f97b 	bl	8000b5c <USART1_print>
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	08001900 	.word	0x08001900

08000870 <TERMINAL_handleCommand>:
static char ssid[TERMINAL_SIZE_OF_COMMAND_BUFFER];
static BOOL waitForPassword=FALSE;
static char password[TERMINAL_SIZE_OF_COMMAND_BUFFER];


void TERMINAL_handleCommand(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
    USART2_getCommand(A_Command_Buffer);
 8000874:	4832      	ldr	r0, [pc, #200]	; (8000940 <TERMINAL_handleCommand+0xd0>)
 8000876:	f000 fa65 	bl	8000d44 <USART2_getCommand>
    // user is trying to connect to wifi
     if((strcmp(A_Command_Buffer, "WIFICONNECT") == 0) &&!waitForPassword &&!waitForSSID){
 800087a:	4932      	ldr	r1, [pc, #200]	; (8000944 <TERMINAL_handleCommand+0xd4>)
 800087c:	4830      	ldr	r0, [pc, #192]	; (8000940 <TERMINAL_handleCommand+0xd0>)
 800087e:	f7ff fcaf 	bl	80001e0 <strcmp>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d10e      	bne.n	80008a6 <TERMINAL_handleCommand+0x36>
 8000888:	4b2f      	ldr	r3, [pc, #188]	; (8000948 <TERMINAL_handleCommand+0xd8>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d10a      	bne.n	80008a6 <TERMINAL_handleCommand+0x36>
 8000890:	4b2e      	ldr	r3, [pc, #184]	; (800094c <TERMINAL_handleCommand+0xdc>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d106      	bne.n	80008a6 <TERMINAL_handleCommand+0x36>
    	 //should be expecting SSID from the user now
    	waitForSSID=TRUE;
 8000898:	4b2c      	ldr	r3, [pc, #176]	; (800094c <TERMINAL_handleCommand+0xdc>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
    	USART2_print("Please enter your WiFi SSID\n");
 800089e:	482c      	ldr	r0, [pc, #176]	; (8000950 <TERMINAL_handleCommand+0xe0>)
 80008a0:	f000 fa8e 	bl	8000dc0 <USART2_print>
    // no special commands we've been waiting for. send the command to uart1 as is but don't forget to add /r/n
    else{
    	    strcat(A_Command_Buffer,"\r\n");
    	    USART1_print(A_Command_Buffer);
    }
}
 80008a4:	e049      	b.n	800093a <TERMINAL_handleCommand+0xca>
    else if(waitForSSID){
 80008a6:	4b29      	ldr	r3, [pc, #164]	; (800094c <TERMINAL_handleCommand+0xdc>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d00d      	beq.n	80008ca <TERMINAL_handleCommand+0x5a>
    	(void)strcpy(ssid, A_Command_Buffer);
 80008ae:	4924      	ldr	r1, [pc, #144]	; (8000940 <TERMINAL_handleCommand+0xd0>)
 80008b0:	4828      	ldr	r0, [pc, #160]	; (8000954 <TERMINAL_handleCommand+0xe4>)
 80008b2:	f000 fb2e 	bl	8000f12 <strcpy>
    	USART2_print("Please enter your Password\n");
 80008b6:	4828      	ldr	r0, [pc, #160]	; (8000958 <TERMINAL_handleCommand+0xe8>)
 80008b8:	f000 fa82 	bl	8000dc0 <USART2_print>
    	waitForSSID=FALSE;
 80008bc:	4b23      	ldr	r3, [pc, #140]	; (800094c <TERMINAL_handleCommand+0xdc>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
    	waitForPassword=TRUE;
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <TERMINAL_handleCommand+0xd8>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	701a      	strb	r2, [r3, #0]
}
 80008c8:	e037      	b.n	800093a <TERMINAL_handleCommand+0xca>
    else if(waitForPassword){
 80008ca:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <TERMINAL_handleCommand+0xd8>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d00b      	beq.n	80008ea <TERMINAL_handleCommand+0x7a>
    	(void)strcpy(password, A_Command_Buffer);
 80008d2:	491b      	ldr	r1, [pc, #108]	; (8000940 <TERMINAL_handleCommand+0xd0>)
 80008d4:	4821      	ldr	r0, [pc, #132]	; (800095c <TERMINAL_handleCommand+0xec>)
 80008d6:	f000 fb1c 	bl	8000f12 <strcpy>
    	waitForPassword=FALSE;
 80008da:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <TERMINAL_handleCommand+0xd8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
    	wifiConnect(ssid,password);
 80008e0:	491e      	ldr	r1, [pc, #120]	; (800095c <TERMINAL_handleCommand+0xec>)
 80008e2:	481c      	ldr	r0, [pc, #112]	; (8000954 <TERMINAL_handleCommand+0xe4>)
 80008e4:	f7ff ff44 	bl	8000770 <wifiConnect>
}
 80008e8:	e027      	b.n	800093a <TERMINAL_handleCommand+0xca>
    else if(strcmp(A_Command_Buffer,"IP")==0){
 80008ea:	491d      	ldr	r1, [pc, #116]	; (8000960 <TERMINAL_handleCommand+0xf0>)
 80008ec:	4814      	ldr	r0, [pc, #80]	; (8000940 <TERMINAL_handleCommand+0xd0>)
 80008ee:	f7ff fc77 	bl	80001e0 <strcmp>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d106      	bne.n	8000906 <TERMINAL_handleCommand+0x96>
    	USART2_print("Server IP is in the first line:\n");
 80008f8:	481a      	ldr	r0, [pc, #104]	; (8000964 <TERMINAL_handleCommand+0xf4>)
 80008fa:	f000 fa61 	bl	8000dc0 <USART2_print>
    	USART1_print("AT+CIFSR\r\n");
 80008fe:	481a      	ldr	r0, [pc, #104]	; (8000968 <TERMINAL_handleCommand+0xf8>)
 8000900:	f000 f92c 	bl	8000b5c <USART1_print>
}
 8000904:	e019      	b.n	800093a <TERMINAL_handleCommand+0xca>
    else if(strcmp(A_Command_Buffer,"WATCHDOG_IGNORE")==0){
 8000906:	4919      	ldr	r1, [pc, #100]	; (800096c <TERMINAL_handleCommand+0xfc>)
 8000908:	480d      	ldr	r0, [pc, #52]	; (8000940 <TERMINAL_handleCommand+0xd0>)
 800090a:	f7ff fc69 	bl	80001e0 <strcmp>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d103      	bne.n	800091c <TERMINAL_handleCommand+0xac>
        USART2_print("WatchDog will reset the program in almost 9 seconds\n");
 8000914:	4816      	ldr	r0, [pc, #88]	; (8000970 <TERMINAL_handleCommand+0x100>)
 8000916:	f000 fa53 	bl	8000dc0 <USART2_print>
    	while(1);
 800091a:	e7fe      	b.n	800091a <TERMINAL_handleCommand+0xaa>
    	    strcat(A_Command_Buffer,"\r\n");
 800091c:	4808      	ldr	r0, [pc, #32]	; (8000940 <TERMINAL_handleCommand+0xd0>)
 800091e:	f7ff fc69 	bl	80001f4 <strlen>
 8000922:	4603      	mov	r3, r0
 8000924:	461a      	mov	r2, r3
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <TERMINAL_handleCommand+0xd0>)
 8000928:	4413      	add	r3, r2
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <TERMINAL_handleCommand+0x104>)
 800092c:	8811      	ldrh	r1, [r2, #0]
 800092e:	7892      	ldrb	r2, [r2, #2]
 8000930:	8019      	strh	r1, [r3, #0]
 8000932:	709a      	strb	r2, [r3, #2]
    	    USART1_print(A_Command_Buffer);
 8000934:	4802      	ldr	r0, [pc, #8]	; (8000940 <TERMINAL_handleCommand+0xd0>)
 8000936:	f000 f911 	bl	8000b5c <USART1_print>
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000110 	.word	0x20000110
 8000944:	08001968 	.word	0x08001968
 8000948:	20000214 	.word	0x20000214
 800094c:	20000190 	.word	0x20000190
 8000950:	08001974 	.word	0x08001974
 8000954:	20000194 	.word	0x20000194
 8000958:	08001994 	.word	0x08001994
 800095c:	20000218 	.word	0x20000218
 8000960:	080019b0 	.word	0x080019b0
 8000964:	080019b4 	.word	0x080019b4
 8000968:	080019d8 	.word	0x080019d8
 800096c:	080019e4 	.word	0x080019e4
 8000970:	080019f4 	.word	0x080019f4
 8000974:	08001a2c 	.word	0x08001a2c

08000978 <__NVIC_EnableIRQ>:
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	2b00      	cmp	r3, #0
 8000988:	db0b      	blt.n	80009a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	f003 021f 	and.w	r2, r3, #31
 8000990:	4907      	ldr	r1, [pc, #28]	; (80009b0 <__NVIC_EnableIRQ+0x38>)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	095b      	lsrs	r3, r3, #5
 8000998:	2001      	movs	r0, #1
 800099a:	fa00 f202 	lsl.w	r2, r0, r2
 800099e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000e100 	.word	0xe000e100

080009b4 <TIMER2_init>:
#include "types.h"

static BOOL Expired = FALSE;


void TIMER2_init(void){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
    // Enable Timer 2 clock (p. 152 in the datasheet).
    RCC->APB1ENR |= 0x00000001;
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <TIMER2_init+0x34>)
 80009ba:	69db      	ldr	r3, [r3, #28]
 80009bc:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <TIMER2_init+0x34>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	61d3      	str	r3, [r2, #28]
    // Set the frequency of Timer 2.
    // Assuming a clock source of 8 MHz (see pp. 127 and 133 in the datasheet),
    // this will set the timer to tick at a rate of 1 Hz.
    TIM2->ARR = 8000000;
 80009c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009c8:	4a08      	ldr	r2, [pc, #32]	; (80009ec <TIMER2_init+0x38>)
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
    // Enable the Timer 2 interrupt.
    TIM2->DIER = 0x00000001;
 80009cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009d0:	2201      	movs	r2, #1
 80009d2:	60da      	str	r2, [r3, #12]
    NVIC_EnableIRQ(TIM2_IRQn);
 80009d4:	201c      	movs	r0, #28
 80009d6:	f7ff ffcf 	bl	8000978 <__NVIC_EnableIRQ>
    // Enable Timer 2.
    TIM2->CR1 = 0x00000001;
 80009da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009de:	2201      	movs	r2, #1
 80009e0:	601a      	str	r2, [r3, #0]
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000
 80009ec:	007a1200 	.word	0x007a1200

080009f0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
	// Clean the interrupt flag.
    TIM2->SR &= ~0x00000001;
 80009f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009f8:	691b      	ldr	r3, [r3, #16]
 80009fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009fe:	f023 0301 	bic.w	r3, r3, #1
 8000a02:	6113      	str	r3, [r2, #16]
	// Raise the software flag.
	Expired = TRUE;
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <TIM2_IRQHandler+0x24>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	20000298 	.word	0x20000298

08000a18 <TIMER2_expired>:



BOOL TIMER2_expired(void){
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
	if(Expired){
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <TIMER2_expired+0x24>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d004      	beq.n	8000a2e <TIMER2_expired+0x16>
		Expired = FALSE;
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <TIMER2_expired+0x24>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
		return TRUE;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e000      	b.n	8000a30 <TIMER2_expired+0x18>
	}
	else{
		return FALSE;
 8000a2e:	2300      	movs	r3, #0
	}
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000298 	.word	0x20000298

08000a40 <__NVIC_EnableIRQ>:
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	db0b      	blt.n	8000a6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	f003 021f 	and.w	r2, r3, #31
 8000a58:	4907      	ldr	r1, [pc, #28]	; (8000a78 <__NVIC_EnableIRQ+0x38>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	095b      	lsrs	r3, r3, #5
 8000a60:	2001      	movs	r0, #1
 8000a62:	fa00 f202 	lsl.w	r2, r0, r2
 8000a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000e100 	.word	0xe000e100

08000a7c <USART1_init>:


// This buffer is used to receive and write commands.
static cyclic_buffer usart1_cy;

void USART1_init(void){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	//Initialize the cyclic buffer used for usart1
	buffer_init(&usart1_cy);
 8000a80:	4814      	ldr	r0, [pc, #80]	; (8000ad4 <USART1_init+0x58>)
 8000a82:	f7ff fc81 	bl	8000388 <buffer_init>
    // Enable GPIOA clock (p. 148 in the datasheet).
    RCC->AHBENR |= 0x00020000;
 8000a86:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <USART1_init+0x5c>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	4a13      	ldr	r2, [pc, #76]	; (8000ad8 <USART1_init+0x5c>)
 8000a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a90:	6153      	str	r3, [r2, #20]
    // Enable USART1 clock.
    RCC->APB2ENR |= 0x00004000;
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <USART1_init+0x5c>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <USART1_init+0x5c>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9c:	6193      	str	r3, [r2, #24]
    // Configure GPIOA pins 9tx and 10rx as alternate function 7, which is USART1.
    GPIOA->MODER |= 0x00280000;
 8000a9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000aa8:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 8000aac:	6013      	str	r3, [r2, #0]
    // and AFR[1] is the same as AFRH in the reference manual (p. 242).
    GPIOA->AFR[1] |= 0x00000770;
 8000aae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ab8:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000abc:	6253      	str	r3, [r2, #36]	; 0x24
    // 8 MHz / set baud rate to 115200.
    USART1->BRR = 8000000/115200;
 8000abe:	4b07      	ldr	r3, [pc, #28]	; (8000adc <USART1_init+0x60>)
 8000ac0:	2245      	movs	r2, #69	; 0x45
 8000ac2:	60da      	str	r2, [r3, #12]
    // Enable USART1 and its RX and TX functionality.
    USART1->CR1 = 0x0000002D;
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <USART1_init+0x60>)
 8000ac6:	222d      	movs	r2, #45	; 0x2d
 8000ac8:	601a      	str	r2, [r3, #0]
    //enable the RX interrupt.
    NVIC_EnableIRQ(USART1_IRQn);
 8000aca:	2025      	movs	r0, #37	; 0x25
 8000acc:	f7ff ffb8 	bl	8000a40 <__NVIC_EnableIRQ>
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	2000029c 	.word	0x2000029c
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40013800 	.word	0x40013800

08000ae0 <USART1_getCommand>:



void USART1_getCommand(char *p_command){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	// while the buffer isnt empty keep reading the next charachter from the buffer to the p_command
	char *temp=p_command;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	60fb      	str	r3, [r7, #12]
	while(!buffer_isEmpty(&usart1_cy)){
 8000aec:	e009      	b.n	8000b02 <USART1_getCommand+0x22>
		*temp=buffer_read(&usart1_cy);
 8000aee:	480b      	ldr	r0, [pc, #44]	; (8000b1c <USART1_getCommand+0x3c>)
 8000af0:	f7ff fc7f 	bl	80003f2 <buffer_read>
 8000af4:	4603      	mov	r3, r0
 8000af6:	461a      	mov	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	701a      	strb	r2, [r3, #0]
		temp++;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	3301      	adds	r3, #1
 8000b00:	60fb      	str	r3, [r7, #12]
	while(!buffer_isEmpty(&usart1_cy)){
 8000b02:	4806      	ldr	r0, [pc, #24]	; (8000b1c <USART1_getCommand+0x3c>)
 8000b04:	f7ff fc97 	bl	8000436 <buffer_isEmpty>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d0ef      	beq.n	8000aee <USART1_getCommand+0xe>
	}
		*temp='\0';
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]

}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	2000029c 	.word	0x2000029c

08000b20 <USART1_EXTI25_IRQHandler>:




void USART1_EXTI25_IRQHandler(void){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0

	char rx_byte;

	// Read the received byte into the cyclic buffer.
	// This also clears the interrupt request flag.
    rx_byte = USART1->RDR;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <USART1_EXTI25_IRQHandler+0x34>)
 8000b28:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	71fb      	strb	r3, [r7, #7]
    // If the user entered '\n', a whole command has been received.
    if(rx_byte == '\n'){
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b0a      	cmp	r3, #10
 8000b32:	d107      	bne.n	8000b44 <USART1_EXTI25_IRQHandler+0x24>
    	// write to the queue that USART1 has a received command
    	eventQ_write(EVENT_USART1_MESSAGE);
 8000b34:	2002      	movs	r0, #2
 8000b36:	f7ff fc9d 	bl	8000474 <eventQ_write>
    	// close the command with /n
    	buffer_write(&usart1_cy, '\n');
 8000b3a:	210a      	movs	r1, #10
 8000b3c:	4806      	ldr	r0, [pc, #24]	; (8000b58 <USART1_EXTI25_IRQHandler+0x38>)
 8000b3e:	f7ff fc35 	bl	80003ac <buffer_write>

    	return;
 8000b42:	e004      	b.n	8000b4e <USART1_EXTI25_IRQHandler+0x2e>
    }
    buffer_write(&usart1_cy, rx_byte);
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	4619      	mov	r1, r3
 8000b48:	4803      	ldr	r0, [pc, #12]	; (8000b58 <USART1_EXTI25_IRQHandler+0x38>)
 8000b4a:	f7ff fc2f 	bl	80003ac <buffer_write>
}
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40013800 	.word	0x40013800
 8000b58:	2000029c 	.word	0x2000029c

08000b5c <USART1_print>:


void USART1_print(const char *p_data){
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	while(*p_data != '\0'){
 8000b64:	e00e      	b.n	8000b84 <USART1_print+0x28>
		USART1->TDR = *p_data;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	781a      	ldrb	r2, [r3, #0]
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <USART1_print+0x40>)
 8000b6c:	b292      	uxth	r2, r2
 8000b6e:	851a      	strh	r2, [r3, #40]	; 0x28
        p_data++;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3301      	adds	r3, #1
 8000b74:	607b      	str	r3, [r7, #4]
        while(!(USART1->ISR & 0x00000080));
 8000b76:	bf00      	nop
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <USART1_print+0x40>)
 8000b7a:	69db      	ldr	r3, [r3, #28]
 8000b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d0f9      	beq.n	8000b78 <USART1_print+0x1c>
	while(*p_data != '\0'){
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1ec      	bne.n	8000b66 <USART1_print+0xa>
	}
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40013800 	.word	0x40013800

08000ba0 <USART1TERMINAL_handleCommand>:
#include "modem.h"
#include "led.h"
#include "button.h"
static char A_Rx_Buffer[TERMINAL_SIZE_OF_COMMAND_BUFFER];

void USART1TERMINAL_handleCommand(){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
		// get the command
		USART1_getCommand(A_Rx_Buffer);
 8000ba4:	4829      	ldr	r0, [pc, #164]	; (8000c4c <USART1TERMINAL_handleCommand+0xac>)
 8000ba6:	f7ff ff9b 	bl	8000ae0 <USART1_getCommand>
		if(strstr(A_Rx_Buffer, "CHANGE_LED") != NULL) {
 8000baa:	4929      	ldr	r1, [pc, #164]	; (8000c50 <USART1TERMINAL_handleCommand+0xb0>)
 8000bac:	4827      	ldr	r0, [pc, #156]	; (8000c4c <USART1TERMINAL_handleCommand+0xac>)
 8000bae:	f000 f9b8 	bl	8000f22 <strstr>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d002      	beq.n	8000bbe <USART1TERMINAL_handleCommand+0x1e>
				LED_change_state();
 8000bb8:	f7ff fce2 	bl	8000580 <LED_change_state>
		}
		// no special commands we were waiting for has been inserted. well, send the command as is to usart2
		else
			USART2_print(A_Rx_Buffer);

}
 8000bbc:	e044      	b.n	8000c48 <USART1TERMINAL_handleCommand+0xa8>
		else if( getWifiConnecting() && strstr(A_Rx_Buffer, "FAIL") != NULL){
 8000bbe:	f7ff fd6d 	bl	800069c <getWifiConnecting>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d00d      	beq.n	8000be4 <USART1TERMINAL_handleCommand+0x44>
 8000bc8:	4922      	ldr	r1, [pc, #136]	; (8000c54 <USART1TERMINAL_handleCommand+0xb4>)
 8000bca:	4820      	ldr	r0, [pc, #128]	; (8000c4c <USART1TERMINAL_handleCommand+0xac>)
 8000bcc:	f000 f9a9 	bl	8000f22 <strstr>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d006      	beq.n	8000be4 <USART1TERMINAL_handleCommand+0x44>
			USART2_print("\nConnection failed please make sure you entered the WiFi SSID or password\n"
 8000bd6:	4820      	ldr	r0, [pc, #128]	; (8000c58 <USART1TERMINAL_handleCommand+0xb8>)
 8000bd8:	f000 f8f2 	bl	8000dc0 <USART2_print>
			setWifiConnecting(FALSE);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff fd69 	bl	80006b4 <setWifiConnecting>
 8000be2:	e031      	b.n	8000c48 <USART1TERMINAL_handleCommand+0xa8>
		else if(strstr(A_Rx_Buffer, "0,CLOSED") != NULL){
 8000be4:	491d      	ldr	r1, [pc, #116]	; (8000c5c <USART1TERMINAL_handleCommand+0xbc>)
 8000be6:	4819      	ldr	r0, [pc, #100]	; (8000c4c <USART1TERMINAL_handleCommand+0xac>)
 8000be8:	f000 f99b 	bl	8000f22 <strstr>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d006      	beq.n	8000c00 <USART1TERMINAL_handleCommand+0x60>
			setClientState(FALSE);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f7ff fd7a 	bl	80006ec <setClientState>
			USART2_print("Client has disconnected\n");
 8000bf8:	4819      	ldr	r0, [pc, #100]	; (8000c60 <USART1TERMINAL_handleCommand+0xc0>)
 8000bfa:	f000 f8e1 	bl	8000dc0 <USART2_print>
}
 8000bfe:	e023      	b.n	8000c48 <USART1TERMINAL_handleCommand+0xa8>
		else if(strstr(A_Rx_Buffer, "0,CONNECT") != NULL){
 8000c00:	4918      	ldr	r1, [pc, #96]	; (8000c64 <USART1TERMINAL_handleCommand+0xc4>)
 8000c02:	4812      	ldr	r0, [pc, #72]	; (8000c4c <USART1TERMINAL_handleCommand+0xac>)
 8000c04:	f000 f98d 	bl	8000f22 <strstr>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d006      	beq.n	8000c1c <USART1TERMINAL_handleCommand+0x7c>
			USART2_print("Client has connected\n");
 8000c0e:	4816      	ldr	r0, [pc, #88]	; (8000c68 <USART1TERMINAL_handleCommand+0xc8>)
 8000c10:	f000 f8d6 	bl	8000dc0 <USART2_print>
			setClientState(TRUE);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f7ff fd69 	bl	80006ec <setClientState>
}
 8000c1a:	e015      	b.n	8000c48 <USART1TERMINAL_handleCommand+0xa8>
		else if(getWifiConnecting() && strstr(A_Rx_Buffer, "OK") != NULL){
 8000c1c:	f7ff fd3e 	bl	800069c <getWifiConnecting>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d00c      	beq.n	8000c40 <USART1TERMINAL_handleCommand+0xa0>
 8000c26:	4911      	ldr	r1, [pc, #68]	; (8000c6c <USART1TERMINAL_handleCommand+0xcc>)
 8000c28:	4808      	ldr	r0, [pc, #32]	; (8000c4c <USART1TERMINAL_handleCommand+0xac>)
 8000c2a:	f000 f97a 	bl	8000f22 <strstr>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d005      	beq.n	8000c40 <USART1TERMINAL_handleCommand+0xa0>
			setWifiConnecting(FALSE);
 8000c34:	2000      	movs	r0, #0
 8000c36:	f7ff fd3d 	bl	80006b4 <setWifiConnecting>
			setServer();
 8000c3a:	f7ff fe0f 	bl	800085c <setServer>
 8000c3e:	e003      	b.n	8000c48 <USART1TERMINAL_handleCommand+0xa8>
			USART2_print(A_Rx_Buffer);
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <USART1TERMINAL_handleCommand+0xac>)
 8000c42:	f000 f8bd 	bl	8000dc0 <USART2_print>
}
 8000c46:	e7ff      	b.n	8000c48 <USART1TERMINAL_handleCommand+0xa8>
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000324 	.word	0x20000324
 8000c50:	08001a30 	.word	0x08001a30
 8000c54:	08001a3c 	.word	0x08001a3c
 8000c58:	08001a44 	.word	0x08001a44
 8000c5c:	08001ac8 	.word	0x08001ac8
 8000c60:	08001ad4 	.word	0x08001ad4
 8000c64:	08001af0 	.word	0x08001af0
 8000c68:	08001afc 	.word	0x08001afc
 8000c6c:	08001b14 	.word	0x08001b14

08000c70 <__NVIC_EnableIRQ>:
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	db0b      	blt.n	8000c9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f003 021f 	and.w	r2, r3, #31
 8000c88:	4907      	ldr	r1, [pc, #28]	; (8000ca8 <__NVIC_EnableIRQ+0x38>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	095b      	lsrs	r3, r3, #5
 8000c90:	2001      	movs	r0, #1
 8000c92:	fa00 f202 	lsl.w	r2, r0, r2
 8000c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <USART2_init>:
// This cyclic buffer is used to receive and write commands.
static cyclic_buffer usart2_cy;
// This buffer is used by the printf-like print function.
static char A_Tx_Buffer[USART2_SIZE_OF_PRINT_BUFFER];

void USART2_init(void){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	// initialize USART2 cyclic buffer
	buffer_init(&usart2_cy);
 8000cb0:	4815      	ldr	r0, [pc, #84]	; (8000d08 <USART2_init+0x5c>)
 8000cb2:	f7ff fb69 	bl	8000388 <buffer_init>
    // Enable GPIOA clock (p. 148 in the datasheet).
    RCC->AHBENR |= 0x00020000;
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <USART2_init+0x60>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <USART2_init+0x60>)
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc0:	6153      	str	r3, [r2, #20]
    // Enable USART2 clock.
    RCC->APB1ENR |= 0x00020000;
 8000cc2:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <USART2_init+0x60>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	4a11      	ldr	r2, [pc, #68]	; (8000d0c <USART2_init+0x60>)
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ccc:	61d3      	str	r3, [r2, #28]
    // Configure GPIOA pins 2 and 3 as alternate function 7, which is USART2.
    GPIOA->MODER |= 0x000000A0;
 8000cce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cd8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000cdc:	6013      	str	r3, [r2, #0]
    // AFR[0] is the same as AFRL in the reference manual (p. 241),
    // and AFR[1] is the same as AFRH in the reference manual (p. 242).
    GPIOA->AFR[0] |= 0x00007700;
 8000cde:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ce2:	6a1b      	ldr	r3, [r3, #32]
 8000ce4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ce8:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000cec:	6213      	str	r3, [r2, #32]
    USART2->BRR = 833;  // 8 MHz / 9600 baud rate.
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <USART2_init+0x64>)
 8000cf0:	f240 3241 	movw	r2, #833	; 0x341
 8000cf4:	60da      	str	r2, [r3, #12]
    // Enable USART2 and its RX and TX functionality.
    // Also enable the RX interrupt.
    USART2->CR1 = 0x0000002D;
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <USART2_init+0x64>)
 8000cf8:	222d      	movs	r2, #45	; 0x2d
 8000cfa:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(USART2_IRQn);
 8000cfc:	2026      	movs	r0, #38	; 0x26
 8000cfe:	f7ff ffb7 	bl	8000c70 <__NVIC_EnableIRQ>
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200003a4 	.word	0x200003a4
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40004400 	.word	0x40004400

08000d14 <print>:

void print(char *p_format, ...){
 8000d14:	b40f      	push	{r0, r1, r2, r3}
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
	va_list p_variables;
	va_start(p_variables, p_format);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	607b      	str	r3, [r7, #4]
	(void)vsprintf(A_Tx_Buffer, p_format, p_variables);
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	6939      	ldr	r1, [r7, #16]
 8000d26:	4806      	ldr	r0, [pc, #24]	; (8000d40 <print+0x2c>)
 8000d28:	f000 f928 	bl	8000f7c <vsiprintf>
    USART2_print(A_Tx_Buffer);
 8000d2c:	4804      	ldr	r0, [pc, #16]	; (8000d40 <print+0x2c>)
 8000d2e:	f000 f847 	bl	8000dc0 <USART2_print>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d3c:	b004      	add	sp, #16
 8000d3e:	4770      	bx	lr
 8000d40:	2000042c 	.word	0x2000042c

08000d44 <USART2_getCommand>:



void USART2_getCommand(char *p_command){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
		//while cyclic buffer isnt empty keep reading to it char by char to the p_command
		char *temp=p_command;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	60fb      	str	r3, [r7, #12]
		while(!buffer_isEmpty(&usart2_cy)){
 8000d50:	e009      	b.n	8000d66 <USART2_getCommand+0x22>
			*temp=buffer_read(&usart2_cy);
 8000d52:	480b      	ldr	r0, [pc, #44]	; (8000d80 <USART2_getCommand+0x3c>)
 8000d54:	f7ff fb4d 	bl	80003f2 <buffer_read>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	701a      	strb	r2, [r3, #0]
			temp++;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	3301      	adds	r3, #1
 8000d64:	60fb      	str	r3, [r7, #12]
		while(!buffer_isEmpty(&usart2_cy)){
 8000d66:	4806      	ldr	r0, [pc, #24]	; (8000d80 <USART2_getCommand+0x3c>)
 8000d68:	f7ff fb65 	bl	8000436 <buffer_isEmpty>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0ef      	beq.n	8000d52 <USART2_getCommand+0xe>
		}
		// close the command with \0
		*temp='\0';
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200003a4 	.word	0x200003a4

08000d84 <USART2_EXTI26_IRQHandler>:





void USART2_EXTI26_IRQHandler(void){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
	char rx_byte;

	// Read the received byte into the buffer.
	// This also clears the interrupt request flag.
    rx_byte = USART2->RDR;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <USART2_EXTI26_IRQHandler+0x34>)
 8000d8c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	71fb      	strb	r3, [r7, #7]

    // If the user entered '\n', a whole command has been received.
    if(rx_byte == '\n'){
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	2b0a      	cmp	r3, #10
 8000d96:	d107      	bne.n	8000da8 <USART2_EXTI26_IRQHandler+0x24>
    	// write to the queue that USART2 has a command/ message
    	eventQ_write(EVENT_USART2_MESSAGE);
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f7ff fb6b 	bl	8000474 <eventQ_write>
    	buffer_write(&usart2_cy, '\0');
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4806      	ldr	r0, [pc, #24]	; (8000dbc <USART2_EXTI26_IRQHandler+0x38>)
 8000da2:	f7ff fb03 	bl	80003ac <buffer_write>
    	return;
 8000da6:	e004      	b.n	8000db2 <USART2_EXTI26_IRQHandler+0x2e>
    }

    buffer_write(&usart2_cy, rx_byte);
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	4619      	mov	r1, r3
 8000dac:	4803      	ldr	r0, [pc, #12]	; (8000dbc <USART2_EXTI26_IRQHandler+0x38>)
 8000dae:	f7ff fafd 	bl	80003ac <buffer_write>
}
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40004400 	.word	0x40004400
 8000dbc:	200003a4 	.word	0x200003a4

08000dc0 <USART2_print>:




void USART2_print(const char *p_data){
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]

	while(*p_data != '\0'){
 8000dc8:	e00e      	b.n	8000de8 <USART2_print+0x28>
		USART2->TDR = *p_data;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	781a      	ldrb	r2, [r3, #0]
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <USART2_print+0x40>)
 8000dd0:	b292      	uxth	r2, r2
 8000dd2:	851a      	strh	r2, [r3, #40]	; 0x28
        p_data++;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	607b      	str	r3, [r7, #4]
        while(!(USART2->ISR & 0x00000080));
 8000dda:	bf00      	nop
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <USART2_print+0x40>)
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0f9      	beq.n	8000ddc <USART2_print+0x1c>
	while(*p_data != '\0'){
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1ec      	bne.n	8000dca <USART2_print+0xa>
	}
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40004400 	.word	0x40004400

08000e04 <WATCHDOG_init>:
#include "watchdog.h"
#include "stm32f303xe.h"

void WATCHDOG_init(){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	// Start/Enable the WatchDog
	IWDG->KR=0x0000CCCC;
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <WATCHDOG_init+0x34>)
 8000e0a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8000e0e:	601a      	str	r2, [r3, #0]
	// enable access to modify the IWDG_PR, IWDG_RLR registers (Reference manual p.760)
	IWDG->KR=0x00005555;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <WATCHDOG_init+0x34>)
 8000e12:	f245 5255 	movw	r2, #21845	; 0x5555
 8000e16:	601a      	str	r2, [r3, #0]
	// prescaler
	IWDG->PR=7;
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <WATCHDOG_init+0x34>)
 8000e1a:	2207      	movs	r2, #7
 8000e1c:	605a      	str	r2, [r3, #4]
	IWDG->RLR=1000;
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <WATCHDOG_init+0x34>)
 8000e20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e24:	609a      	str	r2, [r3, #8]
	// Wait for the registers to be updated
	while(IWDG->SR);
 8000e26:	bf00      	nop
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <WATCHDOG_init+0x34>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1fb      	bne.n	8000e28 <WATCHDOG_init+0x24>
	// Refresh the counter
	WATCHDOG_pet();
 8000e30:	f000 f804 	bl	8000e3c <WATCHDOG_pet>

}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40003000 	.word	0x40003000

08000e3c <WATCHDOG_pet>:

void WATCHDOG_pet(){
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
	// Refresh the counter
	IWDG->KR=0x0000AAAA;
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <WATCHDOG_pet+0x18>)
 8000e42:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000e46:	601a      	str	r2, [r3, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40003000 	.word	0x40003000

08000e58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e5a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e5c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e60:	480c      	ldr	r0, [pc, #48]	; (8000e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e62:	490d      	ldr	r1, [pc, #52]	; (8000e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e64:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <LoopForever+0xe>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e78:	4c0a      	ldr	r4, [pc, #40]	; (8000ea4 <LoopForever+0x16>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e86:	f000 f811 	bl	8000eac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e8a:	f7ff fbb5 	bl	80005f8 <main>

08000e8e <LoopForever>:

LoopForever:
    b LoopForever
 8000e8e:	e7fe      	b.n	8000e8e <LoopForever>
  ldr   r0, =_estack
 8000e90:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e9c:	08001b54 	.word	0x08001b54
  ldr r2, =_sbss
 8000ea0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ea4:	200004c8 	.word	0x200004c8

08000ea8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC1_2_IRQHandler>
	...

08000eac <__libc_init_array>:
 8000eac:	b570      	push	{r4, r5, r6, lr}
 8000eae:	4d0d      	ldr	r5, [pc, #52]	; (8000ee4 <__libc_init_array+0x38>)
 8000eb0:	4c0d      	ldr	r4, [pc, #52]	; (8000ee8 <__libc_init_array+0x3c>)
 8000eb2:	1b64      	subs	r4, r4, r5
 8000eb4:	10a4      	asrs	r4, r4, #2
 8000eb6:	2600      	movs	r6, #0
 8000eb8:	42a6      	cmp	r6, r4
 8000eba:	d109      	bne.n	8000ed0 <__libc_init_array+0x24>
 8000ebc:	4d0b      	ldr	r5, [pc, #44]	; (8000eec <__libc_init_array+0x40>)
 8000ebe:	4c0c      	ldr	r4, [pc, #48]	; (8000ef0 <__libc_init_array+0x44>)
 8000ec0:	f000 fc82 	bl	80017c8 <_init>
 8000ec4:	1b64      	subs	r4, r4, r5
 8000ec6:	10a4      	asrs	r4, r4, #2
 8000ec8:	2600      	movs	r6, #0
 8000eca:	42a6      	cmp	r6, r4
 8000ecc:	d105      	bne.n	8000eda <__libc_init_array+0x2e>
 8000ece:	bd70      	pop	{r4, r5, r6, pc}
 8000ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ed4:	4798      	blx	r3
 8000ed6:	3601      	adds	r6, #1
 8000ed8:	e7ee      	b.n	8000eb8 <__libc_init_array+0xc>
 8000eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ede:	4798      	blx	r3
 8000ee0:	3601      	adds	r6, #1
 8000ee2:	e7f2      	b.n	8000eca <__libc_init_array+0x1e>
 8000ee4:	08001b4c 	.word	0x08001b4c
 8000ee8:	08001b4c 	.word	0x08001b4c
 8000eec:	08001b4c 	.word	0x08001b4c
 8000ef0:	08001b50 	.word	0x08001b50

08000ef4 <strcat>:
 8000ef4:	b510      	push	{r4, lr}
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	7814      	ldrb	r4, [r2, #0]
 8000efa:	4613      	mov	r3, r2
 8000efc:	3201      	adds	r2, #1
 8000efe:	2c00      	cmp	r4, #0
 8000f00:	d1fa      	bne.n	8000ef8 <strcat+0x4>
 8000f02:	3b01      	subs	r3, #1
 8000f04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000f08:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000f0c:	2a00      	cmp	r2, #0
 8000f0e:	d1f9      	bne.n	8000f04 <strcat+0x10>
 8000f10:	bd10      	pop	{r4, pc}

08000f12 <strcpy>:
 8000f12:	4603      	mov	r3, r0
 8000f14:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000f18:	f803 2b01 	strb.w	r2, [r3], #1
 8000f1c:	2a00      	cmp	r2, #0
 8000f1e:	d1f9      	bne.n	8000f14 <strcpy+0x2>
 8000f20:	4770      	bx	lr

08000f22 <strstr>:
 8000f22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f24:	780c      	ldrb	r4, [r1, #0]
 8000f26:	b164      	cbz	r4, 8000f42 <strstr+0x20>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	781a      	ldrb	r2, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	1c5e      	adds	r6, r3, #1
 8000f30:	b90a      	cbnz	r2, 8000f36 <strstr+0x14>
 8000f32:	4610      	mov	r0, r2
 8000f34:	e005      	b.n	8000f42 <strstr+0x20>
 8000f36:	4294      	cmp	r4, r2
 8000f38:	d108      	bne.n	8000f4c <strstr+0x2a>
 8000f3a:	460d      	mov	r5, r1
 8000f3c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8000f40:	b902      	cbnz	r2, 8000f44 <strstr+0x22>
 8000f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f44:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8000f48:	4297      	cmp	r7, r2
 8000f4a:	d0f7      	beq.n	8000f3c <strstr+0x1a>
 8000f4c:	4633      	mov	r3, r6
 8000f4e:	e7ec      	b.n	8000f2a <strstr+0x8>

08000f50 <_vsiprintf_r>:
 8000f50:	b500      	push	{lr}
 8000f52:	b09b      	sub	sp, #108	; 0x6c
 8000f54:	9100      	str	r1, [sp, #0]
 8000f56:	9104      	str	r1, [sp, #16]
 8000f58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000f5c:	9105      	str	r1, [sp, #20]
 8000f5e:	9102      	str	r1, [sp, #8]
 8000f60:	4905      	ldr	r1, [pc, #20]	; (8000f78 <_vsiprintf_r+0x28>)
 8000f62:	9103      	str	r1, [sp, #12]
 8000f64:	4669      	mov	r1, sp
 8000f66:	f000 f86f 	bl	8001048 <_svfiprintf_r>
 8000f6a:	9b00      	ldr	r3, [sp, #0]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	b01b      	add	sp, #108	; 0x6c
 8000f72:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f76:	bf00      	nop
 8000f78:	ffff0208 	.word	0xffff0208

08000f7c <vsiprintf>:
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	460a      	mov	r2, r1
 8000f80:	4601      	mov	r1, r0
 8000f82:	4802      	ldr	r0, [pc, #8]	; (8000f8c <vsiprintf+0x10>)
 8000f84:	6800      	ldr	r0, [r0, #0]
 8000f86:	f7ff bfe3 	b.w	8000f50 <_vsiprintf_r>
 8000f8a:	bf00      	nop
 8000f8c:	20000004 	.word	0x20000004

08000f90 <__ssputs_r>:
 8000f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f94:	688e      	ldr	r6, [r1, #8]
 8000f96:	429e      	cmp	r6, r3
 8000f98:	4682      	mov	sl, r0
 8000f9a:	460c      	mov	r4, r1
 8000f9c:	4690      	mov	r8, r2
 8000f9e:	461f      	mov	r7, r3
 8000fa0:	d838      	bhi.n	8001014 <__ssputs_r+0x84>
 8000fa2:	898a      	ldrh	r2, [r1, #12]
 8000fa4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000fa8:	d032      	beq.n	8001010 <__ssputs_r+0x80>
 8000faa:	6825      	ldr	r5, [r4, #0]
 8000fac:	6909      	ldr	r1, [r1, #16]
 8000fae:	eba5 0901 	sub.w	r9, r5, r1
 8000fb2:	6965      	ldr	r5, [r4, #20]
 8000fb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000fb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	444b      	add	r3, r9
 8000fc0:	106d      	asrs	r5, r5, #1
 8000fc2:	429d      	cmp	r5, r3
 8000fc4:	bf38      	it	cc
 8000fc6:	461d      	movcc	r5, r3
 8000fc8:	0553      	lsls	r3, r2, #21
 8000fca:	d531      	bpl.n	8001030 <__ssputs_r+0xa0>
 8000fcc:	4629      	mov	r1, r5
 8000fce:	f000 fb47 	bl	8001660 <_malloc_r>
 8000fd2:	4606      	mov	r6, r0
 8000fd4:	b950      	cbnz	r0, 8000fec <__ssputs_r+0x5c>
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	f8ca 3000 	str.w	r3, [sl]
 8000fdc:	89a3      	ldrh	r3, [r4, #12]
 8000fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe2:	81a3      	strh	r3, [r4, #12]
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fec:	6921      	ldr	r1, [r4, #16]
 8000fee:	464a      	mov	r2, r9
 8000ff0:	f000 fabe 	bl	8001570 <memcpy>
 8000ff4:	89a3      	ldrh	r3, [r4, #12]
 8000ff6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ffe:	81a3      	strh	r3, [r4, #12]
 8001000:	6126      	str	r6, [r4, #16]
 8001002:	6165      	str	r5, [r4, #20]
 8001004:	444e      	add	r6, r9
 8001006:	eba5 0509 	sub.w	r5, r5, r9
 800100a:	6026      	str	r6, [r4, #0]
 800100c:	60a5      	str	r5, [r4, #8]
 800100e:	463e      	mov	r6, r7
 8001010:	42be      	cmp	r6, r7
 8001012:	d900      	bls.n	8001016 <__ssputs_r+0x86>
 8001014:	463e      	mov	r6, r7
 8001016:	4632      	mov	r2, r6
 8001018:	6820      	ldr	r0, [r4, #0]
 800101a:	4641      	mov	r1, r8
 800101c:	f000 fab6 	bl	800158c <memmove>
 8001020:	68a3      	ldr	r3, [r4, #8]
 8001022:	6822      	ldr	r2, [r4, #0]
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	4432      	add	r2, r6
 8001028:	60a3      	str	r3, [r4, #8]
 800102a:	6022      	str	r2, [r4, #0]
 800102c:	2000      	movs	r0, #0
 800102e:	e7db      	b.n	8000fe8 <__ssputs_r+0x58>
 8001030:	462a      	mov	r2, r5
 8001032:	f000 fb6f 	bl	8001714 <_realloc_r>
 8001036:	4606      	mov	r6, r0
 8001038:	2800      	cmp	r0, #0
 800103a:	d1e1      	bne.n	8001000 <__ssputs_r+0x70>
 800103c:	6921      	ldr	r1, [r4, #16]
 800103e:	4650      	mov	r0, sl
 8001040:	f000 fabe 	bl	80015c0 <_free_r>
 8001044:	e7c7      	b.n	8000fd6 <__ssputs_r+0x46>
	...

08001048 <_svfiprintf_r>:
 8001048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800104c:	4698      	mov	r8, r3
 800104e:	898b      	ldrh	r3, [r1, #12]
 8001050:	061b      	lsls	r3, r3, #24
 8001052:	b09d      	sub	sp, #116	; 0x74
 8001054:	4607      	mov	r7, r0
 8001056:	460d      	mov	r5, r1
 8001058:	4614      	mov	r4, r2
 800105a:	d50e      	bpl.n	800107a <_svfiprintf_r+0x32>
 800105c:	690b      	ldr	r3, [r1, #16]
 800105e:	b963      	cbnz	r3, 800107a <_svfiprintf_r+0x32>
 8001060:	2140      	movs	r1, #64	; 0x40
 8001062:	f000 fafd 	bl	8001660 <_malloc_r>
 8001066:	6028      	str	r0, [r5, #0]
 8001068:	6128      	str	r0, [r5, #16]
 800106a:	b920      	cbnz	r0, 8001076 <_svfiprintf_r+0x2e>
 800106c:	230c      	movs	r3, #12
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	e0d1      	b.n	800121a <_svfiprintf_r+0x1d2>
 8001076:	2340      	movs	r3, #64	; 0x40
 8001078:	616b      	str	r3, [r5, #20]
 800107a:	2300      	movs	r3, #0
 800107c:	9309      	str	r3, [sp, #36]	; 0x24
 800107e:	2320      	movs	r3, #32
 8001080:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001084:	f8cd 800c 	str.w	r8, [sp, #12]
 8001088:	2330      	movs	r3, #48	; 0x30
 800108a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001234 <_svfiprintf_r+0x1ec>
 800108e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001092:	f04f 0901 	mov.w	r9, #1
 8001096:	4623      	mov	r3, r4
 8001098:	469a      	mov	sl, r3
 800109a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800109e:	b10a      	cbz	r2, 80010a4 <_svfiprintf_r+0x5c>
 80010a0:	2a25      	cmp	r2, #37	; 0x25
 80010a2:	d1f9      	bne.n	8001098 <_svfiprintf_r+0x50>
 80010a4:	ebba 0b04 	subs.w	fp, sl, r4
 80010a8:	d00b      	beq.n	80010c2 <_svfiprintf_r+0x7a>
 80010aa:	465b      	mov	r3, fp
 80010ac:	4622      	mov	r2, r4
 80010ae:	4629      	mov	r1, r5
 80010b0:	4638      	mov	r0, r7
 80010b2:	f7ff ff6d 	bl	8000f90 <__ssputs_r>
 80010b6:	3001      	adds	r0, #1
 80010b8:	f000 80aa 	beq.w	8001210 <_svfiprintf_r+0x1c8>
 80010bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80010be:	445a      	add	r2, fp
 80010c0:	9209      	str	r2, [sp, #36]	; 0x24
 80010c2:	f89a 3000 	ldrb.w	r3, [sl]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 80a2 	beq.w	8001210 <_svfiprintf_r+0x1c8>
 80010cc:	2300      	movs	r3, #0
 80010ce:	f04f 32ff 	mov.w	r2, #4294967295
 80010d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80010d6:	f10a 0a01 	add.w	sl, sl, #1
 80010da:	9304      	str	r3, [sp, #16]
 80010dc:	9307      	str	r3, [sp, #28]
 80010de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80010e2:	931a      	str	r3, [sp, #104]	; 0x68
 80010e4:	4654      	mov	r4, sl
 80010e6:	2205      	movs	r2, #5
 80010e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010ec:	4851      	ldr	r0, [pc, #324]	; (8001234 <_svfiprintf_r+0x1ec>)
 80010ee:	f7ff f88f 	bl	8000210 <memchr>
 80010f2:	9a04      	ldr	r2, [sp, #16]
 80010f4:	b9d8      	cbnz	r0, 800112e <_svfiprintf_r+0xe6>
 80010f6:	06d0      	lsls	r0, r2, #27
 80010f8:	bf44      	itt	mi
 80010fa:	2320      	movmi	r3, #32
 80010fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001100:	0711      	lsls	r1, r2, #28
 8001102:	bf44      	itt	mi
 8001104:	232b      	movmi	r3, #43	; 0x2b
 8001106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800110a:	f89a 3000 	ldrb.w	r3, [sl]
 800110e:	2b2a      	cmp	r3, #42	; 0x2a
 8001110:	d015      	beq.n	800113e <_svfiprintf_r+0xf6>
 8001112:	9a07      	ldr	r2, [sp, #28]
 8001114:	4654      	mov	r4, sl
 8001116:	2000      	movs	r0, #0
 8001118:	f04f 0c0a 	mov.w	ip, #10
 800111c:	4621      	mov	r1, r4
 800111e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001122:	3b30      	subs	r3, #48	; 0x30
 8001124:	2b09      	cmp	r3, #9
 8001126:	d94e      	bls.n	80011c6 <_svfiprintf_r+0x17e>
 8001128:	b1b0      	cbz	r0, 8001158 <_svfiprintf_r+0x110>
 800112a:	9207      	str	r2, [sp, #28]
 800112c:	e014      	b.n	8001158 <_svfiprintf_r+0x110>
 800112e:	eba0 0308 	sub.w	r3, r0, r8
 8001132:	fa09 f303 	lsl.w	r3, r9, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	9304      	str	r3, [sp, #16]
 800113a:	46a2      	mov	sl, r4
 800113c:	e7d2      	b.n	80010e4 <_svfiprintf_r+0x9c>
 800113e:	9b03      	ldr	r3, [sp, #12]
 8001140:	1d19      	adds	r1, r3, #4
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	9103      	str	r1, [sp, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	bfbb      	ittet	lt
 800114a:	425b      	neglt	r3, r3
 800114c:	f042 0202 	orrlt.w	r2, r2, #2
 8001150:	9307      	strge	r3, [sp, #28]
 8001152:	9307      	strlt	r3, [sp, #28]
 8001154:	bfb8      	it	lt
 8001156:	9204      	strlt	r2, [sp, #16]
 8001158:	7823      	ldrb	r3, [r4, #0]
 800115a:	2b2e      	cmp	r3, #46	; 0x2e
 800115c:	d10c      	bne.n	8001178 <_svfiprintf_r+0x130>
 800115e:	7863      	ldrb	r3, [r4, #1]
 8001160:	2b2a      	cmp	r3, #42	; 0x2a
 8001162:	d135      	bne.n	80011d0 <_svfiprintf_r+0x188>
 8001164:	9b03      	ldr	r3, [sp, #12]
 8001166:	1d1a      	adds	r2, r3, #4
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	9203      	str	r2, [sp, #12]
 800116c:	2b00      	cmp	r3, #0
 800116e:	bfb8      	it	lt
 8001170:	f04f 33ff 	movlt.w	r3, #4294967295
 8001174:	3402      	adds	r4, #2
 8001176:	9305      	str	r3, [sp, #20]
 8001178:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001244 <_svfiprintf_r+0x1fc>
 800117c:	7821      	ldrb	r1, [r4, #0]
 800117e:	2203      	movs	r2, #3
 8001180:	4650      	mov	r0, sl
 8001182:	f7ff f845 	bl	8000210 <memchr>
 8001186:	b140      	cbz	r0, 800119a <_svfiprintf_r+0x152>
 8001188:	2340      	movs	r3, #64	; 0x40
 800118a:	eba0 000a 	sub.w	r0, r0, sl
 800118e:	fa03 f000 	lsl.w	r0, r3, r0
 8001192:	9b04      	ldr	r3, [sp, #16]
 8001194:	4303      	orrs	r3, r0
 8001196:	3401      	adds	r4, #1
 8001198:	9304      	str	r3, [sp, #16]
 800119a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800119e:	4826      	ldr	r0, [pc, #152]	; (8001238 <_svfiprintf_r+0x1f0>)
 80011a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80011a4:	2206      	movs	r2, #6
 80011a6:	f7ff f833 	bl	8000210 <memchr>
 80011aa:	2800      	cmp	r0, #0
 80011ac:	d038      	beq.n	8001220 <_svfiprintf_r+0x1d8>
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <_svfiprintf_r+0x1f4>)
 80011b0:	bb1b      	cbnz	r3, 80011fa <_svfiprintf_r+0x1b2>
 80011b2:	9b03      	ldr	r3, [sp, #12]
 80011b4:	3307      	adds	r3, #7
 80011b6:	f023 0307 	bic.w	r3, r3, #7
 80011ba:	3308      	adds	r3, #8
 80011bc:	9303      	str	r3, [sp, #12]
 80011be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011c0:	4433      	add	r3, r6
 80011c2:	9309      	str	r3, [sp, #36]	; 0x24
 80011c4:	e767      	b.n	8001096 <_svfiprintf_r+0x4e>
 80011c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80011ca:	460c      	mov	r4, r1
 80011cc:	2001      	movs	r0, #1
 80011ce:	e7a5      	b.n	800111c <_svfiprintf_r+0xd4>
 80011d0:	2300      	movs	r3, #0
 80011d2:	3401      	adds	r4, #1
 80011d4:	9305      	str	r3, [sp, #20]
 80011d6:	4619      	mov	r1, r3
 80011d8:	f04f 0c0a 	mov.w	ip, #10
 80011dc:	4620      	mov	r0, r4
 80011de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80011e2:	3a30      	subs	r2, #48	; 0x30
 80011e4:	2a09      	cmp	r2, #9
 80011e6:	d903      	bls.n	80011f0 <_svfiprintf_r+0x1a8>
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0c5      	beq.n	8001178 <_svfiprintf_r+0x130>
 80011ec:	9105      	str	r1, [sp, #20]
 80011ee:	e7c3      	b.n	8001178 <_svfiprintf_r+0x130>
 80011f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80011f4:	4604      	mov	r4, r0
 80011f6:	2301      	movs	r3, #1
 80011f8:	e7f0      	b.n	80011dc <_svfiprintf_r+0x194>
 80011fa:	ab03      	add	r3, sp, #12
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	462a      	mov	r2, r5
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <_svfiprintf_r+0x1f8>)
 8001202:	a904      	add	r1, sp, #16
 8001204:	4638      	mov	r0, r7
 8001206:	f3af 8000 	nop.w
 800120a:	1c42      	adds	r2, r0, #1
 800120c:	4606      	mov	r6, r0
 800120e:	d1d6      	bne.n	80011be <_svfiprintf_r+0x176>
 8001210:	89ab      	ldrh	r3, [r5, #12]
 8001212:	065b      	lsls	r3, r3, #25
 8001214:	f53f af2c 	bmi.w	8001070 <_svfiprintf_r+0x28>
 8001218:	9809      	ldr	r0, [sp, #36]	; 0x24
 800121a:	b01d      	add	sp, #116	; 0x74
 800121c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001220:	ab03      	add	r3, sp, #12
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	462a      	mov	r2, r5
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <_svfiprintf_r+0x1f8>)
 8001228:	a904      	add	r1, sp, #16
 800122a:	4638      	mov	r0, r7
 800122c:	f000 f87a 	bl	8001324 <_printf_i>
 8001230:	e7eb      	b.n	800120a <_svfiprintf_r+0x1c2>
 8001232:	bf00      	nop
 8001234:	08001b17 	.word	0x08001b17
 8001238:	08001b21 	.word	0x08001b21
 800123c:	00000000 	.word	0x00000000
 8001240:	08000f91 	.word	0x08000f91
 8001244:	08001b1d 	.word	0x08001b1d

08001248 <_printf_common>:
 8001248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800124c:	4616      	mov	r6, r2
 800124e:	4699      	mov	r9, r3
 8001250:	688a      	ldr	r2, [r1, #8]
 8001252:	690b      	ldr	r3, [r1, #16]
 8001254:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001258:	4293      	cmp	r3, r2
 800125a:	bfb8      	it	lt
 800125c:	4613      	movlt	r3, r2
 800125e:	6033      	str	r3, [r6, #0]
 8001260:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001264:	4607      	mov	r7, r0
 8001266:	460c      	mov	r4, r1
 8001268:	b10a      	cbz	r2, 800126e <_printf_common+0x26>
 800126a:	3301      	adds	r3, #1
 800126c:	6033      	str	r3, [r6, #0]
 800126e:	6823      	ldr	r3, [r4, #0]
 8001270:	0699      	lsls	r1, r3, #26
 8001272:	bf42      	ittt	mi
 8001274:	6833      	ldrmi	r3, [r6, #0]
 8001276:	3302      	addmi	r3, #2
 8001278:	6033      	strmi	r3, [r6, #0]
 800127a:	6825      	ldr	r5, [r4, #0]
 800127c:	f015 0506 	ands.w	r5, r5, #6
 8001280:	d106      	bne.n	8001290 <_printf_common+0x48>
 8001282:	f104 0a19 	add.w	sl, r4, #25
 8001286:	68e3      	ldr	r3, [r4, #12]
 8001288:	6832      	ldr	r2, [r6, #0]
 800128a:	1a9b      	subs	r3, r3, r2
 800128c:	42ab      	cmp	r3, r5
 800128e:	dc26      	bgt.n	80012de <_printf_common+0x96>
 8001290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001294:	1e13      	subs	r3, r2, #0
 8001296:	6822      	ldr	r2, [r4, #0]
 8001298:	bf18      	it	ne
 800129a:	2301      	movne	r3, #1
 800129c:	0692      	lsls	r2, r2, #26
 800129e:	d42b      	bmi.n	80012f8 <_printf_common+0xb0>
 80012a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80012a4:	4649      	mov	r1, r9
 80012a6:	4638      	mov	r0, r7
 80012a8:	47c0      	blx	r8
 80012aa:	3001      	adds	r0, #1
 80012ac:	d01e      	beq.n	80012ec <_printf_common+0xa4>
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	68e5      	ldr	r5, [r4, #12]
 80012b2:	6832      	ldr	r2, [r6, #0]
 80012b4:	f003 0306 	and.w	r3, r3, #6
 80012b8:	2b04      	cmp	r3, #4
 80012ba:	bf08      	it	eq
 80012bc:	1aad      	subeq	r5, r5, r2
 80012be:	68a3      	ldr	r3, [r4, #8]
 80012c0:	6922      	ldr	r2, [r4, #16]
 80012c2:	bf0c      	ite	eq
 80012c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80012c8:	2500      	movne	r5, #0
 80012ca:	4293      	cmp	r3, r2
 80012cc:	bfc4      	itt	gt
 80012ce:	1a9b      	subgt	r3, r3, r2
 80012d0:	18ed      	addgt	r5, r5, r3
 80012d2:	2600      	movs	r6, #0
 80012d4:	341a      	adds	r4, #26
 80012d6:	42b5      	cmp	r5, r6
 80012d8:	d11a      	bne.n	8001310 <_printf_common+0xc8>
 80012da:	2000      	movs	r0, #0
 80012dc:	e008      	b.n	80012f0 <_printf_common+0xa8>
 80012de:	2301      	movs	r3, #1
 80012e0:	4652      	mov	r2, sl
 80012e2:	4649      	mov	r1, r9
 80012e4:	4638      	mov	r0, r7
 80012e6:	47c0      	blx	r8
 80012e8:	3001      	adds	r0, #1
 80012ea:	d103      	bne.n	80012f4 <_printf_common+0xac>
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012f4:	3501      	adds	r5, #1
 80012f6:	e7c6      	b.n	8001286 <_printf_common+0x3e>
 80012f8:	18e1      	adds	r1, r4, r3
 80012fa:	1c5a      	adds	r2, r3, #1
 80012fc:	2030      	movs	r0, #48	; 0x30
 80012fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001302:	4422      	add	r2, r4
 8001304:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001308:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800130c:	3302      	adds	r3, #2
 800130e:	e7c7      	b.n	80012a0 <_printf_common+0x58>
 8001310:	2301      	movs	r3, #1
 8001312:	4622      	mov	r2, r4
 8001314:	4649      	mov	r1, r9
 8001316:	4638      	mov	r0, r7
 8001318:	47c0      	blx	r8
 800131a:	3001      	adds	r0, #1
 800131c:	d0e6      	beq.n	80012ec <_printf_common+0xa4>
 800131e:	3601      	adds	r6, #1
 8001320:	e7d9      	b.n	80012d6 <_printf_common+0x8e>
	...

08001324 <_printf_i>:
 8001324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001328:	460c      	mov	r4, r1
 800132a:	4691      	mov	r9, r2
 800132c:	7e27      	ldrb	r7, [r4, #24]
 800132e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001330:	2f78      	cmp	r7, #120	; 0x78
 8001332:	4680      	mov	r8, r0
 8001334:	469a      	mov	sl, r3
 8001336:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800133a:	d807      	bhi.n	800134c <_printf_i+0x28>
 800133c:	2f62      	cmp	r7, #98	; 0x62
 800133e:	d80a      	bhi.n	8001356 <_printf_i+0x32>
 8001340:	2f00      	cmp	r7, #0
 8001342:	f000 80d8 	beq.w	80014f6 <_printf_i+0x1d2>
 8001346:	2f58      	cmp	r7, #88	; 0x58
 8001348:	f000 80a3 	beq.w	8001492 <_printf_i+0x16e>
 800134c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001350:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001354:	e03a      	b.n	80013cc <_printf_i+0xa8>
 8001356:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800135a:	2b15      	cmp	r3, #21
 800135c:	d8f6      	bhi.n	800134c <_printf_i+0x28>
 800135e:	a001      	add	r0, pc, #4	; (adr r0, 8001364 <_printf_i+0x40>)
 8001360:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001364:	080013bd 	.word	0x080013bd
 8001368:	080013d1 	.word	0x080013d1
 800136c:	0800134d 	.word	0x0800134d
 8001370:	0800134d 	.word	0x0800134d
 8001374:	0800134d 	.word	0x0800134d
 8001378:	0800134d 	.word	0x0800134d
 800137c:	080013d1 	.word	0x080013d1
 8001380:	0800134d 	.word	0x0800134d
 8001384:	0800134d 	.word	0x0800134d
 8001388:	0800134d 	.word	0x0800134d
 800138c:	0800134d 	.word	0x0800134d
 8001390:	080014dd 	.word	0x080014dd
 8001394:	08001401 	.word	0x08001401
 8001398:	080014bf 	.word	0x080014bf
 800139c:	0800134d 	.word	0x0800134d
 80013a0:	0800134d 	.word	0x0800134d
 80013a4:	080014ff 	.word	0x080014ff
 80013a8:	0800134d 	.word	0x0800134d
 80013ac:	08001401 	.word	0x08001401
 80013b0:	0800134d 	.word	0x0800134d
 80013b4:	0800134d 	.word	0x0800134d
 80013b8:	080014c7 	.word	0x080014c7
 80013bc:	680b      	ldr	r3, [r1, #0]
 80013be:	1d1a      	adds	r2, r3, #4
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	600a      	str	r2, [r1, #0]
 80013c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80013c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80013cc:	2301      	movs	r3, #1
 80013ce:	e0a3      	b.n	8001518 <_printf_i+0x1f4>
 80013d0:	6825      	ldr	r5, [r4, #0]
 80013d2:	6808      	ldr	r0, [r1, #0]
 80013d4:	062e      	lsls	r6, r5, #24
 80013d6:	f100 0304 	add.w	r3, r0, #4
 80013da:	d50a      	bpl.n	80013f2 <_printf_i+0xce>
 80013dc:	6805      	ldr	r5, [r0, #0]
 80013de:	600b      	str	r3, [r1, #0]
 80013e0:	2d00      	cmp	r5, #0
 80013e2:	da03      	bge.n	80013ec <_printf_i+0xc8>
 80013e4:	232d      	movs	r3, #45	; 0x2d
 80013e6:	426d      	negs	r5, r5
 80013e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80013ec:	485e      	ldr	r0, [pc, #376]	; (8001568 <_printf_i+0x244>)
 80013ee:	230a      	movs	r3, #10
 80013f0:	e019      	b.n	8001426 <_printf_i+0x102>
 80013f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80013f6:	6805      	ldr	r5, [r0, #0]
 80013f8:	600b      	str	r3, [r1, #0]
 80013fa:	bf18      	it	ne
 80013fc:	b22d      	sxthne	r5, r5
 80013fe:	e7ef      	b.n	80013e0 <_printf_i+0xbc>
 8001400:	680b      	ldr	r3, [r1, #0]
 8001402:	6825      	ldr	r5, [r4, #0]
 8001404:	1d18      	adds	r0, r3, #4
 8001406:	6008      	str	r0, [r1, #0]
 8001408:	0628      	lsls	r0, r5, #24
 800140a:	d501      	bpl.n	8001410 <_printf_i+0xec>
 800140c:	681d      	ldr	r5, [r3, #0]
 800140e:	e002      	b.n	8001416 <_printf_i+0xf2>
 8001410:	0669      	lsls	r1, r5, #25
 8001412:	d5fb      	bpl.n	800140c <_printf_i+0xe8>
 8001414:	881d      	ldrh	r5, [r3, #0]
 8001416:	4854      	ldr	r0, [pc, #336]	; (8001568 <_printf_i+0x244>)
 8001418:	2f6f      	cmp	r7, #111	; 0x6f
 800141a:	bf0c      	ite	eq
 800141c:	2308      	moveq	r3, #8
 800141e:	230a      	movne	r3, #10
 8001420:	2100      	movs	r1, #0
 8001422:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001426:	6866      	ldr	r6, [r4, #4]
 8001428:	60a6      	str	r6, [r4, #8]
 800142a:	2e00      	cmp	r6, #0
 800142c:	bfa2      	ittt	ge
 800142e:	6821      	ldrge	r1, [r4, #0]
 8001430:	f021 0104 	bicge.w	r1, r1, #4
 8001434:	6021      	strge	r1, [r4, #0]
 8001436:	b90d      	cbnz	r5, 800143c <_printf_i+0x118>
 8001438:	2e00      	cmp	r6, #0
 800143a:	d04d      	beq.n	80014d8 <_printf_i+0x1b4>
 800143c:	4616      	mov	r6, r2
 800143e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001442:	fb03 5711 	mls	r7, r3, r1, r5
 8001446:	5dc7      	ldrb	r7, [r0, r7]
 8001448:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800144c:	462f      	mov	r7, r5
 800144e:	42bb      	cmp	r3, r7
 8001450:	460d      	mov	r5, r1
 8001452:	d9f4      	bls.n	800143e <_printf_i+0x11a>
 8001454:	2b08      	cmp	r3, #8
 8001456:	d10b      	bne.n	8001470 <_printf_i+0x14c>
 8001458:	6823      	ldr	r3, [r4, #0]
 800145a:	07df      	lsls	r7, r3, #31
 800145c:	d508      	bpl.n	8001470 <_printf_i+0x14c>
 800145e:	6923      	ldr	r3, [r4, #16]
 8001460:	6861      	ldr	r1, [r4, #4]
 8001462:	4299      	cmp	r1, r3
 8001464:	bfde      	ittt	le
 8001466:	2330      	movle	r3, #48	; 0x30
 8001468:	f806 3c01 	strble.w	r3, [r6, #-1]
 800146c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001470:	1b92      	subs	r2, r2, r6
 8001472:	6122      	str	r2, [r4, #16]
 8001474:	f8cd a000 	str.w	sl, [sp]
 8001478:	464b      	mov	r3, r9
 800147a:	aa03      	add	r2, sp, #12
 800147c:	4621      	mov	r1, r4
 800147e:	4640      	mov	r0, r8
 8001480:	f7ff fee2 	bl	8001248 <_printf_common>
 8001484:	3001      	adds	r0, #1
 8001486:	d14c      	bne.n	8001522 <_printf_i+0x1fe>
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	b004      	add	sp, #16
 800148e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001492:	4835      	ldr	r0, [pc, #212]	; (8001568 <_printf_i+0x244>)
 8001494:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001498:	6823      	ldr	r3, [r4, #0]
 800149a:	680e      	ldr	r6, [r1, #0]
 800149c:	061f      	lsls	r7, r3, #24
 800149e:	f856 5b04 	ldr.w	r5, [r6], #4
 80014a2:	600e      	str	r6, [r1, #0]
 80014a4:	d514      	bpl.n	80014d0 <_printf_i+0x1ac>
 80014a6:	07d9      	lsls	r1, r3, #31
 80014a8:	bf44      	itt	mi
 80014aa:	f043 0320 	orrmi.w	r3, r3, #32
 80014ae:	6023      	strmi	r3, [r4, #0]
 80014b0:	b91d      	cbnz	r5, 80014ba <_printf_i+0x196>
 80014b2:	6823      	ldr	r3, [r4, #0]
 80014b4:	f023 0320 	bic.w	r3, r3, #32
 80014b8:	6023      	str	r3, [r4, #0]
 80014ba:	2310      	movs	r3, #16
 80014bc:	e7b0      	b.n	8001420 <_printf_i+0xfc>
 80014be:	6823      	ldr	r3, [r4, #0]
 80014c0:	f043 0320 	orr.w	r3, r3, #32
 80014c4:	6023      	str	r3, [r4, #0]
 80014c6:	2378      	movs	r3, #120	; 0x78
 80014c8:	4828      	ldr	r0, [pc, #160]	; (800156c <_printf_i+0x248>)
 80014ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80014ce:	e7e3      	b.n	8001498 <_printf_i+0x174>
 80014d0:	065e      	lsls	r6, r3, #25
 80014d2:	bf48      	it	mi
 80014d4:	b2ad      	uxthmi	r5, r5
 80014d6:	e7e6      	b.n	80014a6 <_printf_i+0x182>
 80014d8:	4616      	mov	r6, r2
 80014da:	e7bb      	b.n	8001454 <_printf_i+0x130>
 80014dc:	680b      	ldr	r3, [r1, #0]
 80014de:	6826      	ldr	r6, [r4, #0]
 80014e0:	6960      	ldr	r0, [r4, #20]
 80014e2:	1d1d      	adds	r5, r3, #4
 80014e4:	600d      	str	r5, [r1, #0]
 80014e6:	0635      	lsls	r5, r6, #24
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	d501      	bpl.n	80014f0 <_printf_i+0x1cc>
 80014ec:	6018      	str	r0, [r3, #0]
 80014ee:	e002      	b.n	80014f6 <_printf_i+0x1d2>
 80014f0:	0671      	lsls	r1, r6, #25
 80014f2:	d5fb      	bpl.n	80014ec <_printf_i+0x1c8>
 80014f4:	8018      	strh	r0, [r3, #0]
 80014f6:	2300      	movs	r3, #0
 80014f8:	6123      	str	r3, [r4, #16]
 80014fa:	4616      	mov	r6, r2
 80014fc:	e7ba      	b.n	8001474 <_printf_i+0x150>
 80014fe:	680b      	ldr	r3, [r1, #0]
 8001500:	1d1a      	adds	r2, r3, #4
 8001502:	600a      	str	r2, [r1, #0]
 8001504:	681e      	ldr	r6, [r3, #0]
 8001506:	6862      	ldr	r2, [r4, #4]
 8001508:	2100      	movs	r1, #0
 800150a:	4630      	mov	r0, r6
 800150c:	f7fe fe80 	bl	8000210 <memchr>
 8001510:	b108      	cbz	r0, 8001516 <_printf_i+0x1f2>
 8001512:	1b80      	subs	r0, r0, r6
 8001514:	6060      	str	r0, [r4, #4]
 8001516:	6863      	ldr	r3, [r4, #4]
 8001518:	6123      	str	r3, [r4, #16]
 800151a:	2300      	movs	r3, #0
 800151c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001520:	e7a8      	b.n	8001474 <_printf_i+0x150>
 8001522:	6923      	ldr	r3, [r4, #16]
 8001524:	4632      	mov	r2, r6
 8001526:	4649      	mov	r1, r9
 8001528:	4640      	mov	r0, r8
 800152a:	47d0      	blx	sl
 800152c:	3001      	adds	r0, #1
 800152e:	d0ab      	beq.n	8001488 <_printf_i+0x164>
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	079b      	lsls	r3, r3, #30
 8001534:	d413      	bmi.n	800155e <_printf_i+0x23a>
 8001536:	68e0      	ldr	r0, [r4, #12]
 8001538:	9b03      	ldr	r3, [sp, #12]
 800153a:	4298      	cmp	r0, r3
 800153c:	bfb8      	it	lt
 800153e:	4618      	movlt	r0, r3
 8001540:	e7a4      	b.n	800148c <_printf_i+0x168>
 8001542:	2301      	movs	r3, #1
 8001544:	4632      	mov	r2, r6
 8001546:	4649      	mov	r1, r9
 8001548:	4640      	mov	r0, r8
 800154a:	47d0      	blx	sl
 800154c:	3001      	adds	r0, #1
 800154e:	d09b      	beq.n	8001488 <_printf_i+0x164>
 8001550:	3501      	adds	r5, #1
 8001552:	68e3      	ldr	r3, [r4, #12]
 8001554:	9903      	ldr	r1, [sp, #12]
 8001556:	1a5b      	subs	r3, r3, r1
 8001558:	42ab      	cmp	r3, r5
 800155a:	dcf2      	bgt.n	8001542 <_printf_i+0x21e>
 800155c:	e7eb      	b.n	8001536 <_printf_i+0x212>
 800155e:	2500      	movs	r5, #0
 8001560:	f104 0619 	add.w	r6, r4, #25
 8001564:	e7f5      	b.n	8001552 <_printf_i+0x22e>
 8001566:	bf00      	nop
 8001568:	08001b28 	.word	0x08001b28
 800156c:	08001b39 	.word	0x08001b39

08001570 <memcpy>:
 8001570:	440a      	add	r2, r1
 8001572:	4291      	cmp	r1, r2
 8001574:	f100 33ff 	add.w	r3, r0, #4294967295
 8001578:	d100      	bne.n	800157c <memcpy+0xc>
 800157a:	4770      	bx	lr
 800157c:	b510      	push	{r4, lr}
 800157e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001582:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001586:	4291      	cmp	r1, r2
 8001588:	d1f9      	bne.n	800157e <memcpy+0xe>
 800158a:	bd10      	pop	{r4, pc}

0800158c <memmove>:
 800158c:	4288      	cmp	r0, r1
 800158e:	b510      	push	{r4, lr}
 8001590:	eb01 0402 	add.w	r4, r1, r2
 8001594:	d902      	bls.n	800159c <memmove+0x10>
 8001596:	4284      	cmp	r4, r0
 8001598:	4623      	mov	r3, r4
 800159a:	d807      	bhi.n	80015ac <memmove+0x20>
 800159c:	1e43      	subs	r3, r0, #1
 800159e:	42a1      	cmp	r1, r4
 80015a0:	d008      	beq.n	80015b4 <memmove+0x28>
 80015a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80015a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80015aa:	e7f8      	b.n	800159e <memmove+0x12>
 80015ac:	4402      	add	r2, r0
 80015ae:	4601      	mov	r1, r0
 80015b0:	428a      	cmp	r2, r1
 80015b2:	d100      	bne.n	80015b6 <memmove+0x2a>
 80015b4:	bd10      	pop	{r4, pc}
 80015b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80015ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80015be:	e7f7      	b.n	80015b0 <memmove+0x24>

080015c0 <_free_r>:
 80015c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80015c2:	2900      	cmp	r1, #0
 80015c4:	d048      	beq.n	8001658 <_free_r+0x98>
 80015c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015ca:	9001      	str	r0, [sp, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f1a1 0404 	sub.w	r4, r1, #4
 80015d2:	bfb8      	it	lt
 80015d4:	18e4      	addlt	r4, r4, r3
 80015d6:	f000 f8d3 	bl	8001780 <__malloc_lock>
 80015da:	4a20      	ldr	r2, [pc, #128]	; (800165c <_free_r+0x9c>)
 80015dc:	9801      	ldr	r0, [sp, #4]
 80015de:	6813      	ldr	r3, [r2, #0]
 80015e0:	4615      	mov	r5, r2
 80015e2:	b933      	cbnz	r3, 80015f2 <_free_r+0x32>
 80015e4:	6063      	str	r3, [r4, #4]
 80015e6:	6014      	str	r4, [r2, #0]
 80015e8:	b003      	add	sp, #12
 80015ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80015ee:	f000 b8cd 	b.w	800178c <__malloc_unlock>
 80015f2:	42a3      	cmp	r3, r4
 80015f4:	d90b      	bls.n	800160e <_free_r+0x4e>
 80015f6:	6821      	ldr	r1, [r4, #0]
 80015f8:	1862      	adds	r2, r4, r1
 80015fa:	4293      	cmp	r3, r2
 80015fc:	bf04      	itt	eq
 80015fe:	681a      	ldreq	r2, [r3, #0]
 8001600:	685b      	ldreq	r3, [r3, #4]
 8001602:	6063      	str	r3, [r4, #4]
 8001604:	bf04      	itt	eq
 8001606:	1852      	addeq	r2, r2, r1
 8001608:	6022      	streq	r2, [r4, #0]
 800160a:	602c      	str	r4, [r5, #0]
 800160c:	e7ec      	b.n	80015e8 <_free_r+0x28>
 800160e:	461a      	mov	r2, r3
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	b10b      	cbz	r3, 8001618 <_free_r+0x58>
 8001614:	42a3      	cmp	r3, r4
 8001616:	d9fa      	bls.n	800160e <_free_r+0x4e>
 8001618:	6811      	ldr	r1, [r2, #0]
 800161a:	1855      	adds	r5, r2, r1
 800161c:	42a5      	cmp	r5, r4
 800161e:	d10b      	bne.n	8001638 <_free_r+0x78>
 8001620:	6824      	ldr	r4, [r4, #0]
 8001622:	4421      	add	r1, r4
 8001624:	1854      	adds	r4, r2, r1
 8001626:	42a3      	cmp	r3, r4
 8001628:	6011      	str	r1, [r2, #0]
 800162a:	d1dd      	bne.n	80015e8 <_free_r+0x28>
 800162c:	681c      	ldr	r4, [r3, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	6053      	str	r3, [r2, #4]
 8001632:	4421      	add	r1, r4
 8001634:	6011      	str	r1, [r2, #0]
 8001636:	e7d7      	b.n	80015e8 <_free_r+0x28>
 8001638:	d902      	bls.n	8001640 <_free_r+0x80>
 800163a:	230c      	movs	r3, #12
 800163c:	6003      	str	r3, [r0, #0]
 800163e:	e7d3      	b.n	80015e8 <_free_r+0x28>
 8001640:	6825      	ldr	r5, [r4, #0]
 8001642:	1961      	adds	r1, r4, r5
 8001644:	428b      	cmp	r3, r1
 8001646:	bf04      	itt	eq
 8001648:	6819      	ldreq	r1, [r3, #0]
 800164a:	685b      	ldreq	r3, [r3, #4]
 800164c:	6063      	str	r3, [r4, #4]
 800164e:	bf04      	itt	eq
 8001650:	1949      	addeq	r1, r1, r5
 8001652:	6021      	streq	r1, [r4, #0]
 8001654:	6054      	str	r4, [r2, #4]
 8001656:	e7c7      	b.n	80015e8 <_free_r+0x28>
 8001658:	b003      	add	sp, #12
 800165a:	bd30      	pop	{r4, r5, pc}
 800165c:	200004ac 	.word	0x200004ac

08001660 <_malloc_r>:
 8001660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001662:	1ccd      	adds	r5, r1, #3
 8001664:	f025 0503 	bic.w	r5, r5, #3
 8001668:	3508      	adds	r5, #8
 800166a:	2d0c      	cmp	r5, #12
 800166c:	bf38      	it	cc
 800166e:	250c      	movcc	r5, #12
 8001670:	2d00      	cmp	r5, #0
 8001672:	4606      	mov	r6, r0
 8001674:	db01      	blt.n	800167a <_malloc_r+0x1a>
 8001676:	42a9      	cmp	r1, r5
 8001678:	d903      	bls.n	8001682 <_malloc_r+0x22>
 800167a:	230c      	movs	r3, #12
 800167c:	6033      	str	r3, [r6, #0]
 800167e:	2000      	movs	r0, #0
 8001680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001682:	f000 f87d 	bl	8001780 <__malloc_lock>
 8001686:	4921      	ldr	r1, [pc, #132]	; (800170c <_malloc_r+0xac>)
 8001688:	680a      	ldr	r2, [r1, #0]
 800168a:	4614      	mov	r4, r2
 800168c:	b99c      	cbnz	r4, 80016b6 <_malloc_r+0x56>
 800168e:	4f20      	ldr	r7, [pc, #128]	; (8001710 <_malloc_r+0xb0>)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	b923      	cbnz	r3, 800169e <_malloc_r+0x3e>
 8001694:	4621      	mov	r1, r4
 8001696:	4630      	mov	r0, r6
 8001698:	f000 f862 	bl	8001760 <_sbrk_r>
 800169c:	6038      	str	r0, [r7, #0]
 800169e:	4629      	mov	r1, r5
 80016a0:	4630      	mov	r0, r6
 80016a2:	f000 f85d 	bl	8001760 <_sbrk_r>
 80016a6:	1c43      	adds	r3, r0, #1
 80016a8:	d123      	bne.n	80016f2 <_malloc_r+0x92>
 80016aa:	230c      	movs	r3, #12
 80016ac:	6033      	str	r3, [r6, #0]
 80016ae:	4630      	mov	r0, r6
 80016b0:	f000 f86c 	bl	800178c <__malloc_unlock>
 80016b4:	e7e3      	b.n	800167e <_malloc_r+0x1e>
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	1b5b      	subs	r3, r3, r5
 80016ba:	d417      	bmi.n	80016ec <_malloc_r+0x8c>
 80016bc:	2b0b      	cmp	r3, #11
 80016be:	d903      	bls.n	80016c8 <_malloc_r+0x68>
 80016c0:	6023      	str	r3, [r4, #0]
 80016c2:	441c      	add	r4, r3
 80016c4:	6025      	str	r5, [r4, #0]
 80016c6:	e004      	b.n	80016d2 <_malloc_r+0x72>
 80016c8:	6863      	ldr	r3, [r4, #4]
 80016ca:	42a2      	cmp	r2, r4
 80016cc:	bf0c      	ite	eq
 80016ce:	600b      	streq	r3, [r1, #0]
 80016d0:	6053      	strne	r3, [r2, #4]
 80016d2:	4630      	mov	r0, r6
 80016d4:	f000 f85a 	bl	800178c <__malloc_unlock>
 80016d8:	f104 000b 	add.w	r0, r4, #11
 80016dc:	1d23      	adds	r3, r4, #4
 80016de:	f020 0007 	bic.w	r0, r0, #7
 80016e2:	1ac2      	subs	r2, r0, r3
 80016e4:	d0cc      	beq.n	8001680 <_malloc_r+0x20>
 80016e6:	1a1b      	subs	r3, r3, r0
 80016e8:	50a3      	str	r3, [r4, r2]
 80016ea:	e7c9      	b.n	8001680 <_malloc_r+0x20>
 80016ec:	4622      	mov	r2, r4
 80016ee:	6864      	ldr	r4, [r4, #4]
 80016f0:	e7cc      	b.n	800168c <_malloc_r+0x2c>
 80016f2:	1cc4      	adds	r4, r0, #3
 80016f4:	f024 0403 	bic.w	r4, r4, #3
 80016f8:	42a0      	cmp	r0, r4
 80016fa:	d0e3      	beq.n	80016c4 <_malloc_r+0x64>
 80016fc:	1a21      	subs	r1, r4, r0
 80016fe:	4630      	mov	r0, r6
 8001700:	f000 f82e 	bl	8001760 <_sbrk_r>
 8001704:	3001      	adds	r0, #1
 8001706:	d1dd      	bne.n	80016c4 <_malloc_r+0x64>
 8001708:	e7cf      	b.n	80016aa <_malloc_r+0x4a>
 800170a:	bf00      	nop
 800170c:	200004ac 	.word	0x200004ac
 8001710:	200004b0 	.word	0x200004b0

08001714 <_realloc_r>:
 8001714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001716:	4607      	mov	r7, r0
 8001718:	4614      	mov	r4, r2
 800171a:	460e      	mov	r6, r1
 800171c:	b921      	cbnz	r1, 8001728 <_realloc_r+0x14>
 800171e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001722:	4611      	mov	r1, r2
 8001724:	f7ff bf9c 	b.w	8001660 <_malloc_r>
 8001728:	b922      	cbnz	r2, 8001734 <_realloc_r+0x20>
 800172a:	f7ff ff49 	bl	80015c0 <_free_r>
 800172e:	4625      	mov	r5, r4
 8001730:	4628      	mov	r0, r5
 8001732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001734:	f000 f830 	bl	8001798 <_malloc_usable_size_r>
 8001738:	42a0      	cmp	r0, r4
 800173a:	d20f      	bcs.n	800175c <_realloc_r+0x48>
 800173c:	4621      	mov	r1, r4
 800173e:	4638      	mov	r0, r7
 8001740:	f7ff ff8e 	bl	8001660 <_malloc_r>
 8001744:	4605      	mov	r5, r0
 8001746:	2800      	cmp	r0, #0
 8001748:	d0f2      	beq.n	8001730 <_realloc_r+0x1c>
 800174a:	4631      	mov	r1, r6
 800174c:	4622      	mov	r2, r4
 800174e:	f7ff ff0f 	bl	8001570 <memcpy>
 8001752:	4631      	mov	r1, r6
 8001754:	4638      	mov	r0, r7
 8001756:	f7ff ff33 	bl	80015c0 <_free_r>
 800175a:	e7e9      	b.n	8001730 <_realloc_r+0x1c>
 800175c:	4635      	mov	r5, r6
 800175e:	e7e7      	b.n	8001730 <_realloc_r+0x1c>

08001760 <_sbrk_r>:
 8001760:	b538      	push	{r3, r4, r5, lr}
 8001762:	4d06      	ldr	r5, [pc, #24]	; (800177c <_sbrk_r+0x1c>)
 8001764:	2300      	movs	r3, #0
 8001766:	4604      	mov	r4, r0
 8001768:	4608      	mov	r0, r1
 800176a:	602b      	str	r3, [r5, #0]
 800176c:	f000 f81e 	bl	80017ac <_sbrk>
 8001770:	1c43      	adds	r3, r0, #1
 8001772:	d102      	bne.n	800177a <_sbrk_r+0x1a>
 8001774:	682b      	ldr	r3, [r5, #0]
 8001776:	b103      	cbz	r3, 800177a <_sbrk_r+0x1a>
 8001778:	6023      	str	r3, [r4, #0]
 800177a:	bd38      	pop	{r3, r4, r5, pc}
 800177c:	200004b8 	.word	0x200004b8

08001780 <__malloc_lock>:
 8001780:	4801      	ldr	r0, [pc, #4]	; (8001788 <__malloc_lock+0x8>)
 8001782:	f000 b811 	b.w	80017a8 <__retarget_lock_acquire_recursive>
 8001786:	bf00      	nop
 8001788:	200004c0 	.word	0x200004c0

0800178c <__malloc_unlock>:
 800178c:	4801      	ldr	r0, [pc, #4]	; (8001794 <__malloc_unlock+0x8>)
 800178e:	f000 b80c 	b.w	80017aa <__retarget_lock_release_recursive>
 8001792:	bf00      	nop
 8001794:	200004c0 	.word	0x200004c0

08001798 <_malloc_usable_size_r>:
 8001798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800179c:	1f18      	subs	r0, r3, #4
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bfbc      	itt	lt
 80017a2:	580b      	ldrlt	r3, [r1, r0]
 80017a4:	18c0      	addlt	r0, r0, r3
 80017a6:	4770      	bx	lr

080017a8 <__retarget_lock_acquire_recursive>:
 80017a8:	4770      	bx	lr

080017aa <__retarget_lock_release_recursive>:
 80017aa:	4770      	bx	lr

080017ac <_sbrk>:
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <_sbrk+0x14>)
 80017ae:	6819      	ldr	r1, [r3, #0]
 80017b0:	4602      	mov	r2, r0
 80017b2:	b909      	cbnz	r1, 80017b8 <_sbrk+0xc>
 80017b4:	4903      	ldr	r1, [pc, #12]	; (80017c4 <_sbrk+0x18>)
 80017b6:	6019      	str	r1, [r3, #0]
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	4402      	add	r2, r0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	4770      	bx	lr
 80017c0:	200004b4 	.word	0x200004b4
 80017c4:	200004c8 	.word	0x200004c8

080017c8 <_init>:
 80017c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ca:	bf00      	nop
 80017cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ce:	bc08      	pop	{r3}
 80017d0:	469e      	mov	lr, r3
 80017d2:	4770      	bx	lr

080017d4 <_fini>:
 80017d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017d6:	bf00      	nop
 80017d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017da:	bc08      	pop	{r3}
 80017dc:	469e      	mov	lr, r3
 80017de:	4770      	bx	lr
